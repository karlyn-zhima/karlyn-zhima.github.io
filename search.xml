<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记事本Go手搓LeetCode Top150</title>
      <link href="/posts/leetcodeTop150.html"/>
      <url>/posts/leetcodeTop150.html</url>
      
        <content type="html"><![CDATA[<h1>1.合并两个有序数组</h1><h2 id="题目描述">题目描述</h2><p><a href="https://leetcode.cn/problems/merge-sorted-array/">88. 合并两个有序数组</a></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p>**注意：**最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = <span class="comment">[1,2,3,0,0,0]</span>, m = 3, nums2 = <span class="comment">[2,5,6]</span>, n = 3</span><br><span class="line">输出：<span class="comment">[1,2,2,3,5,6]</span></span><br><span class="line">解释：需要合并 <span class="comment">[1,2,3]</span> 和 <span class="comment">[2,5,6]</span> 。</span><br><span class="line">合并结果是 <span class="comment">[1,2,2,3,5,6]</span> ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = <span class="comment">[1]</span>, m = 1, nums2 = <span class="comment">[]</span>, n = 0</span><br><span class="line">输出：<span class="comment">[1]</span></span><br><span class="line">解释：需要合并 <span class="comment">[1]</span> 和 <span class="comment">[]</span> 。</span><br><span class="line">合并结果是 <span class="comment">[1]</span> 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = <span class="comment">[0]</span>, m = 0, nums2 = <span class="comment">[1]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[1]</span></span><br><span class="line">解释：需要合并的数组是 <span class="comment">[]</span> 和 <span class="comment">[1]</span> 。</span><br><span class="line">合并结果是 <span class="comment">[1]</span> 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><p>**进阶：**你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p><h2 id="题解">题解</h2><p>思路不多说，尾插法即可，较为简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="type">int</span>, m <span class="type">int</span>, nums2 []<span class="type">int</span>, n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//不额外占用空间，所以就是在num1上原地修改</span></span><br><span class="line">ptr1, ptr2, ptr := m<span class="number">-1</span>, n<span class="number">-1</span>, m+n<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> ;ptr1 &gt;=<span class="number">0</span> &amp;&amp; ptr2 &gt;= <span class="number">0</span>;&#123;</span><br><span class="line">        <span class="keyword">if</span> nums1[ptr1]&gt;nums2[ptr2]&#123;</span><br><span class="line">            nums1[ptr] = nums1[ptr1]</span><br><span class="line">            ptr--</span><br><span class="line">            ptr1--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[ptr] = nums2[ptr2]</span><br><span class="line">            ptr--</span><br><span class="line">            ptr2--</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> ;ptr2&gt;=<span class="number">0</span>;&#123;</span><br><span class="line">        nums1[ptr] = nums2[ptr2]</span><br><span class="line">        ptr--</span><br><span class="line">        ptr2--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>2.移动元素</h1><h2 id="题目描述-2">题目描述</h2><p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">val</span> = ...; <span class="comment">// 要移除的值</span></span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> expectedNums = [...]; <span class="comment">// 长度正确的预期答案。</span></span><br><span class="line">                            <span class="comment">// 它以不等于 val 的值排序。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> k = removeElement(nums, <span class="keyword">val</span>); <span class="comment">// 调用你的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> k<span class="operator"> == </span>expectedNums.length;</span><br><span class="line">sort(nums, <span class="number">0</span>, k); <span class="comment">// 排序 nums 的前 k 个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; actualLength; i++) &#123;</span><br><span class="line">    <span class="keyword">assert</span> nums[i]<span class="operator"> == </span>expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="literal">_</span>,<span class="literal">_</span>]</span><br><span class="line">解释：你的函数函数应该返回 k = <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0,1,2,2</span>,<span class="number">3,0,4,2</span>], val = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0,1,4,0</span>,<span class="number">3</span>,_,_,_]</span><br><span class="line">解释：你的函数应该返回 k = <span class="number">5</span>，并且 nums 中的前五个元素为 <span class="number">0,0,1,3</span>,<span class="number">4</span>。</span><br><span class="line">注意这五个元素可以任意顺序返回。</span><br><span class="line">你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><h2 id="题解-2">题解</h2><p>原地移除且允许顺序变换，那就是简单的元素位置交换，思路不多说，主要看代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    lst := <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i&lt;=lst; i++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] != val &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> lst&gt;=<span class="number">0</span>&amp;&amp;nums[lst]==val&#123;</span><br><span class="line">                lst--</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i&lt;lst&#123;</span><br><span class="line">            tmp := nums[i]</span><br><span class="line">            nums[i] = nums[lst]</span><br><span class="line">            nums[lst] = tmp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lst+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>3.删除有序数组中的重复项</h1><h2 id="题目描述-3">题目描述</h2><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></p><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums <span class="operator">=</span> [...]<span class="comment">; // 输入数组</span></span><br><span class="line">int[] expectedNums <span class="operator">=</span> [...]<span class="comment">; // 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line">int k <span class="operator">=</span> removeDuplicates(nums)<span class="comment">; // 调用</span></span><br><span class="line"></span><br><span class="line">assert k <span class="operator">=</span><span class="operator">=</span> expectedNums.length<span class="comment">;</span></span><br><span class="line">for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; k; i++) &#123;</span></span><br><span class="line">    assert nums[i] <span class="operator">=</span><span class="operator">=</span> expectedNums[i]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,1,2]</span></span><br><span class="line">输出：2, nums = <span class="comment">[1,2,_]</span></span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0,0,1,1</span>,<span class="number">1,2,2,3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0,1,2,3</span>,<span class="number">4</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span> ， 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非严格递增</strong> 排列</li></ul><h2 id="题解-3">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//特例，额外处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有效数字</span></span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ptr := <span class="number">1</span>; ptr&lt;<span class="built_in">len</span>(nums); ptr++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[ptr]!=nums[start]&#123;</span><br><span class="line">            start++</span><br><span class="line">            nums[start] = nums[ptr]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>4.删除有序数组的重复项II</h1><h2 id="题目描述-4">题目描述</h2><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">80. 删除有序数组中的重复项 II</a></p><p>给你一个有序数组 <code>nums</code> ，请你**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明：</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">len</span> = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[1,1,1,2,2,3]</span></span><br><span class="line">输出：<span class="number">5</span>, nums = <span class="string">[1,1,2,2,3]</span></span><br><span class="line">解释：函数应返回新长度 length = <span class="number">5</span>, 并且原数组的前五个元素被修改为 <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0,0,1,1</span>,<span class="number">1,1,2,3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">7</span>, nums = [<span class="number">0,0,1,1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应返回新长度 length = <span class="number">7</span>, 并且原数组的前七个元素被修改为 <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按升序排列</li></ul><h2 id="题解-4">题解</h2><p>这题其实本质上和上一题相同，不过多解释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">2</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">    &#125;</span><br><span class="line">    start := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ptr := <span class="number">2</span>; ptr&lt;<span class="built_in">len</span>(nums); ptr++&#123;</span><br><span class="line">        <span class="comment">//这个对比的是start-1,不可以是ptr-2</span></span><br><span class="line">        <span class="keyword">if</span> nums[ptr] != nums[start<span class="number">-1</span>]&#123;</span><br><span class="line">            start++</span><br><span class="line">            nums[start] = nums[ptr]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>5.多数元素</h1><h2 id="题目描述-5">题目描述</h2><p><a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></p><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例 1：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：nums </span>=<span class="string"> [3,2,3]</span></span><br><span class="line"><span class="string">输出：3</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[2,2,1,1,1,2,2]</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><p>**进阶：**尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p><h2 id="题解-5">题解</h2><p>典型的思维题，解决方式也比较简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    res := <span class="number">-1</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,val := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> val==res&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> count==<span class="number">0</span>&#123;</span><br><span class="line">                res = val</span><br><span class="line">                count++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>6.轮转数组</h1><h2 id="题目描述-6">题目描述</h2><p><a href="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a></p><p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">输入</span><span class="punctuation">:</span> <span class="string">nums = [1,2,3,4,5,6,7], k = 3</span></span><br><span class="line"><span class="attribute">输出</span><span class="punctuation">:</span> <span class="string">[5,6,7,1,2,3,4]</span></span><br><span class="line"><span class="attribute">解释</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">向右轮转 1 步</span><span class="punctuation">:</span> <span class="string">[7,1,2,3,4,5,6]</span></span><br><span class="line"><span class="attribute">向右轮转 2 步</span><span class="punctuation">:</span> <span class="string">[6,7,1,2,3,4,5]</span></span><br><span class="line"><span class="attribute">向右轮转 3 步</span><span class="punctuation">:</span> <span class="string">[5,6,7,1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="string">-1</span>,<span class="string">-100</span>,3,99], k = 2</span><br><span class="line">输出：[3,99,<span class="string">-1</span>,<span class="string">-100</span>]</span><br><span class="line">解释: </span><br><span class="line">向右轮转 1 步: [99,<span class="string">-1</span>,<span class="string">-100</span>,3]</span><br><span class="line">向右轮转 2 步: [3,99,<span class="string">-1</span>,<span class="string">-100</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= k &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>尽可能想出更多的解决方案，至少有 <strong>三种</strong> 不同的方法可以解决这个问题。</li><li>你可以使用空间复杂度为 <code>O(1)</code> 的 <strong>原地</strong> 算法解决这个问题吗？</li></ul><h2 id="题解-6">题解</h2><p>其实这也是个思维题，我们可以尝试用呆板的方式解决，或者也可以用trick，这里两种题解都放一下</p><h3 id="Trick解法：翻转数组">Trick解法：翻转数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="type">int</span>, start <span class="type">int</span>, end <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> start &lt; end &#123;</span><br><span class="line">        nums[start], nums[end] = nums[end], nums[start]</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    k = k%<span class="built_in">len</span>(nums)</span><br><span class="line">    reverse(nums,<span class="number">0</span>,<span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">    reverse(nums,<span class="number">0</span>,k<span class="number">-1</span>)</span><br><span class="line">    reverse(nums,k,<span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这里其实已经很感觉出来go是个很简洁的语言了，主要感觉还是有一些库啥的不太熟练，比如我就不知道go有没有优先级队列</p><h3 id="传统解法，看似呆瓜实际全是技巧">传统解法，看似呆瓜实际全是技巧</h3><p>听我说，这种方法真的写起来很累，真的很累</p><p>同时写到这里的时候，我发现一个问题</p><p><strong>在 Go 中，<code>:=</code> 是短变量声明操作符，用于在同一作用域内声明并初始化变量。Go 的设计允许在嵌套作用域（如循环块、条件块等）中重复使用 <code>:=</code> 声明同名变量，但需要注意：</strong></p><ul><li><strong>在 Go 中，变量的作用域由其声明的位置决定。</strong></li><li><strong>如果在一个嵌套作用域（如循环体或条件块）中使用 <code>:=</code> 声明一个与外部作用域同名的变量，则会屏蔽（shadow） 外部作用域中的变量。</strong></li><li><strong>当嵌套作用域结束时，屏蔽效果消失，外部作用域的变量重新可见。</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    k = k%n</span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">  <span class="comment">//记录安置好的元素个数</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">  <span class="comment">//从第一个开始安置</span></span><br><span class="line">    ptr := start</span><br><span class="line">    <span class="keyword">for</span> count&lt;<span class="built_in">len</span>(nums)&#123;</span><br><span class="line">        ptr = (ptr+k)%n</span><br><span class="line">        <span class="keyword">if</span> ptr == start&#123;</span><br><span class="line">          <span class="comment">//第start圈循环的最后一个，安置到start位置</span></span><br><span class="line">          <span class="comment">//记得安置完数目+1</span></span><br><span class="line">            count++</span><br><span class="line">            start++</span><br><span class="line">            ptr = start</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp := nums[start]</span><br><span class="line">        nums[start] = nums[ptr]</span><br><span class="line">        nums[ptr] = tmp</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>7.买卖股票的最佳时机</h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></p><h2 id="题目描述-7">题目描述</h2><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第<span class="number"> 2 </span>天（股票价格 = 1）的时候买入，在第<span class="number"> 5 </span>天（股票价格 = 6）的时候卖出，最大利润 = 6-1 =<span class="number"> 5 </span>。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = <span class="string">[7,6,4,3,1]</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 <span class="number">0</span>。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 105</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h2 id="题解-7">题解</h2><p>经典题，go不提供Max的比较方式，同时，MaxInt、MinInt是在math包下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    preMin := math.MaxInt</span><br><span class="line">    res := math.MinInt</span><br><span class="line">    <span class="keyword">for</span> _,value := <span class="keyword">range</span> prices&#123;</span><br><span class="line">        <span class="keyword">if</span> value&lt;preMin&#123;</span><br><span class="line">            preMin = value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> res&lt;value-preMin&#123;</span><br><span class="line">            res = value-preMin</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>8.买卖股票的最佳时机II</h1><h2 id="题目描述-8">题目描述</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></p><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,1,5,3,6,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第<span class="number"> 2 </span>天（股票价格 = 1）的时候买入，在第<span class="number"> 3 </span>天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 5 </span>-<span class="number"> 1 </span>= 4。</span><br><span class="line">随后，在第<span class="number"> 4 </span>天（股票价格 = 3）的时候买入，在第<span class="number"> 5 </span>天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 6 </span>-<span class="number"> 3 </span>= 3。</span><br><span class="line">最大总利润为<span class="number"> 4 </span>+<span class="number"> 3 </span>=<span class="number"> 7 </span>。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第<span class="number"> 1 </span>天（股票价格 = 1）的时候买入，在第<span class="number"> 5 </span>天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 5 </span>-<span class="number"> 1 </span>= 4。</span><br><span class="line">最大总利润为<span class="number"> 4 </span>。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = <span class="string">[7,6,4,3,1]</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 <span class="number">0</span>。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h2 id="题解-8">题解</h2><p>我不喜欢用贪心的思路去做，所以还是用dp做了</p><p>注意go初始化二维切片的时候，第一次make其实只初始化了第一维</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> num1&gt;num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//只初始化了第一维，每个子数组其实还是nil，第一次使用的时候要手动初始化</span></span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">int</span>,<span class="built_in">len</span>(prices))</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">2</span>)</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>]</span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i&lt;<span class="built_in">len</span>(prices); i++&#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">2</span>)</span><br><span class="line">        dp[i][<span class="number">0</span>] = max(dp[i<span class="number">-1</span>][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">1</span>] + prices[i])</span><br><span class="line">        dp[i][<span class="number">1</span>] = max(dp[i<span class="number">-1</span>][<span class="number">1</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>] - prices[i])</span><br><span class="line">        res = max(dp[i][<span class="number">0</span>],res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>9.跳跃游戏</h1><h2 id="题目描述-9">题目描述</h2><p><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></p><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳<span class="number"> 1 </span>步，从下标<span class="number"> 0 </span>到达下标 1, 然后再从下标<span class="number"> 1 </span>跳<span class="number"> 3 </span>步到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,0,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：无论怎样，总会到达下标为<span class="number"> 3 </span>的位置。但该下标的最大跳跃长度是<span class="number"> 0 </span>， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h2 id="题解-9">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    max := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pre :=<span class="number">0</span>; pre&lt;=max&amp;&amp;pre&lt;<span class="built_in">len</span>(nums); pre++&#123;</span><br><span class="line">        <span class="keyword">if</span> pre + nums[pre] &gt; max &#123;</span><br><span class="line">            max = pre + nums[pre]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max&gt;=<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>10.跳跃游戏II</h1><h2 id="题目描述-10">题目描述</h2><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组 <code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code> 向后跳转的最大长度。换句话说，如果你在 <code>nums[i]</code> 处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code></li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code> 的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为<span class="number"> 0 </span>跳到下标为<span class="number"> 1 </span>的位置，跳<span class="number"> 1 </span>步，然后跳<span class="number"> 3 </span>步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: nums = [2,3,0,1,4]</span></span><br><span class="line"><span class="section">输出: 2</span></span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li>题目保证可以到达 <code>nums[n-1]</code></li></ul><h2 id="题解-10">题解</h2><p>典型的dp问题了，不多说了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    end := <span class="number">0</span></span><br><span class="line">    maxPos := <span class="number">0</span></span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> index + value &gt; maxPos &#123;</span><br><span class="line">            maxPos = index + value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == end &amp;&amp; index&lt;<span class="built_in">len</span>(nums)<span class="number">-1</span> &#123;</span><br><span class="line">            end = maxPos</span><br><span class="line">            res++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看官解的思路很怪，这是我原本的思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> res[] =<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[j]+j&lt;i)&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i]=res[j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用go写一遍</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="built_in">len</span>(nums);i++&#123;</span><br><span class="line">        <span class="keyword">for</span> start+nums[start]&lt;i&#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = dp[start]+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="built_in">len</span>(nums)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>11.H指数</h1><h2 id="题目描述-11">题目描述</h2><p><a href="https://leetcode.cn/problems/h-index/">274. H 指数</a></p><p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数。计算并返回该研究者的 <strong><code>h</code> 指数</strong>。</p><p>根据维基百科上 <a href="https://baike.baidu.com/item/h-index/3991452?fr=aladdin">h 指数的定义</a>：<code>h</code> 代表“高引用次数” ，一名科研人员的 <code>h</code> <strong>指数</strong> 是指他（她）至少发表了 <code>h</code> 篇论文，并且 <strong>至少</strong> 有 <code>h</code> 篇论文被引用次数大于等于 <code>h</code> 。如果 <code>h</code> 有多种可能的值，<strong><code>h</code> 指数</strong> 是其中最大的那个。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：citations = [3,0,6,1,5]</span><br><span class="line">输出：3 </span><br><span class="line">解释：给定数组表示研究者总共有<span class="number"> 5 </span>篇论文，每篇论文相应的被引用了 3, 0, 6, 1,<span class="number"> 5 </span>次。</span><br><span class="line">     由于研究者有<span class="number"> 3 </span>篇论文每篇 至少 被引用了<span class="number"> 3 </span>次，其余两篇论文每篇被引用 不多于<span class="number"> 3 </span>次，所以她的 h 指数是 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：citations </span>=<span class="string"> [1,3,1]</span></span><br><span class="line"><span class="string">输出：1 </span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == citations.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= citations[i] &lt;= 1000</code></li></ul><h2 id="题解-11">题解</h2><p>这题稍微要转个弯，有两种解法，首先是排序的思路</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sort.Slice(citations,<span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> citations[i] &lt; citations[j]</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//当然也可以这么写</span></span><br><span class="line">  <span class="comment">//sort.Ints(citations)</span></span><br><span class="line">  <span class="comment">//假设全部论文都满足引用大于n，然后从头开始删除</span></span><br><span class="line">    pre := <span class="built_in">len</span>(citations)</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> citations&#123;</span><br><span class="line">        <span class="keyword">if</span> value &lt; pre&#123;</span><br><span class="line">            pre--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种思路，就是计数排序，但是需要创建额外的空间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(num1, num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> num1&gt;num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    index := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(citations)+<span class="number">1</span>)</span><br><span class="line">    n := <span class="built_in">len</span>(citations)</span><br><span class="line">    <span class="keyword">for</span> _,value := <span class="keyword">range</span> citations&#123;</span><br><span class="line">        index[min(value,n)]+=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=n; i&gt;=<span class="number">0</span>; i--&#123;</span><br><span class="line">        sum += index[i]</span><br><span class="line">        <span class="keyword">if</span> sum&gt;= i&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>12.O(1) 时间插入、删除和获取随机元素</h1><h2 id="题目描述-12">题目描述</h2><p><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></p><p>实现<code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><p><strong>示例：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">&quot;RandomizedSet&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;remove&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;getRandom&quot;</span>, <span class="string">&quot;remove&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;getRandom&quot;</span>]</span><br><span class="line"><span class="string">[[], [1], [2], [2], [], [1], [2], []]</span></span><br><span class="line">输出</span><br><span class="line">[null, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">RandomizedSet randomizedSet = new RandomizedSet();</span><br><span class="line">randomizedSet.<span class="built_in">insert</span>(<span class="number">1</span>); // 向集合中插入 <span class="number">1</span> 。返回 <span class="literal">true</span> 表示 <span class="number">1</span> 被成功地插入。</span><br><span class="line">randomizedSet.<span class="built_in">remove</span>(<span class="number">2</span>); // 返回 <span class="literal">false</span> ，表示集合中不存在 <span class="number">2</span> 。</span><br><span class="line">randomizedSet.<span class="built_in">insert</span>(<span class="number">2</span>); // 向集合中插入 <span class="number">2</span> 。返回 <span class="literal">true</span> 。集合现在包含 [<span class="number">1</span>,<span class="number">2</span>] 。</span><br><span class="line">randomizedSet.getRandom(); // getRandom 应随机返回 <span class="number">1</span> 或 <span class="number">2</span> 。</span><br><span class="line">randomizedSet.<span class="built_in">remove</span>(<span class="number">1</span>); // 从集合中移除 <span class="number">1</span> ，返回 <span class="literal">true</span> 。集合现在包含 [<span class="number">2</span>] 。</span><br><span class="line">randomizedSet.<span class="built_in">insert</span>(<span class="number">2</span>); // <span class="number">2</span> 已在集合中，所以返回 <span class="literal">false</span> 。</span><br><span class="line">randomizedSet.getRandom(); // 由于 <span class="number">2</span> 是集合中唯一的数字，getRandom 总是返回 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= val &lt;= 231 - 1</code></li><li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 * ``105</code> 次</li><li>在调用 <code>getRandom</code> 方法时，数据结构中 <strong>至少存在一个</strong> 元素。</li></ul><h2 id="题解-12">题解</h2><p>其实这题还挺难的，首先是插入、删除操作要是O1的就得需要一个方法快速判断当前val值是否存在，如果存在在哪个位置，这点就需要我们使用一个map来实现。其次的删除O1，注意的是，数组的删除是无法做到O1的，所以我们只能采用尾部节点位置替换的思路来做。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RandomizedSet <span class="keyword">struct</span> &#123;</span><br><span class="line">    nums []<span class="type">int</span></span><br><span class="line">    hash <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> RandomizedSet &#123;</span><br><span class="line">    <span class="keyword">return</span> RandomizedSet&#123;[]<span class="type">int</span>&#123;&#125;,<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> Insert(val <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, exist := this.hash[val]; exist &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    this.hash[val] = <span class="built_in">len</span>(this.nums)</span><br><span class="line">    this.nums = <span class="built_in">append</span>(this.nums, val)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> Remove(val <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> value, exist := this.hash[val]; exist&#123;</span><br><span class="line">        lst := <span class="built_in">len</span>(this.nums)<span class="number">-1</span></span><br><span class="line">        this.nums[value] = this.nums[lst]</span><br><span class="line">        this.hash[this.nums[value]] = value</span><br><span class="line">        <span class="built_in">delete</span>(this.hash, val)</span><br><span class="line">        this.nums = this.nums[:lst]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> GetRandom() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> this.nums[rand.Intn(<span class="built_in">len</span>(this.nums))]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * param_1 := obj.Insert(val);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Remove(val);</span></span><br><span class="line"><span class="comment"> * param_3 := obj.GetRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1>13.除自身以外数组的乘积</h1><h2 id="题目描述-13">题目描述</h2><p><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></p><p>给你一个整数数组 <code>nums</code>，返回 数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请 **不要使用除法，**且在 <code>O(n)</code> 时间复杂度内完成此题。</p><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1,2,3,4</span>]</span><br><span class="line">输出: [<span class="number">24,12,8,6</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = <span class="comment">[-1,1,0,-3,3]</span></span><br><span class="line">输出: <span class="comment">[0,0,9,0,0]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 105</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li>输入 <strong>保证</strong> 数组 <code>answer[i]</code> 在 <strong>32 位</strong> 整数范围内</li></ul><p>**进阶：**你可以在 <code>O(1)</code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 <strong>不被视为</strong> 额外空间。）</p><h2 id="题解-13">题解</h2><p>笑了，这leetCode说的O(1)额外复杂度，意思是除了返回数组之外的，不让用除法就是两个list，分别是左边和右边的乘积</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">productExceptSelf</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//返回数组，接下来我们用它来保存左边的乘积</span></span><br><span class="line">    res := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    pre := nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i&lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        res[i] = pre</span><br><span class="line">        pre = pre * nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接下来修改原数组，用原数组保存右边的乘积</span></span><br><span class="line">    lst := nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>]</span><br><span class="line">    nums[<span class="built_in">len</span>(nums)<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums)<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">        tmp := lst</span><br><span class="line">        lst = lst * nums[i]</span><br><span class="line">      <span class="comment">//这里不能写lst/nums[i]的原因主要是可能/0</span></span><br><span class="line">        nums[i] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        res[i] *= nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>14.加油站</h1><h2 id="题目描述-14">题目描述</h2><p><a href="https://leetcode.cn/problems/gas-station/">134. 加油站</a></p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><p><strong>示例 1:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">从<span class="number"> 3 </span>号加油站(索引为<span class="number"> 3 </span>处)出发，可获得<span class="number"> 4 </span>升汽油。此时油箱有 =<span class="number"> 0 </span>+<span class="number"> 4 </span>=<span class="number"> 4 </span>升汽油</span><br><span class="line">开往<span class="number"> 4 </span>号加油站，此时油箱有<span class="number"> 4 </span>-<span class="number"> 1 </span>+<span class="number"> 5 </span>=<span class="number"> 8 </span>升汽油</span><br><span class="line">开往<span class="number"> 0 </span>号加油站，此时油箱有<span class="number"> 8 </span>-<span class="number"> 2 </span>+<span class="number"> 1 </span>=<span class="number"> 7 </span>升汽油</span><br><span class="line">开往<span class="number"> 1 </span>号加油站，此时油箱有<span class="number"> 7 </span>-<span class="number"> 3 </span>+<span class="number"> 2 </span>=<span class="number"> 6 </span>升汽油</span><br><span class="line">开往<span class="number"> 2 </span>号加油站，此时油箱有<span class="number"> 6 </span>-<span class="number"> 4 </span>+<span class="number"> 3 </span>=<span class="number"> 5 </span>升汽油</span><br><span class="line">开往<span class="number"> 3 </span>号加油站，你需要消耗<span class="number"> 5 </span>升汽油，正好足够你返回到<span class="number"> 3 </span>号加油站。</span><br><span class="line">因此，3 可为起始索引。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [2,3,4], cost = [3,4,3]</span><br><span class="line">输出: -1</span><br><span class="line">解释:</span><br><span class="line">你不能从<span class="number"> 0 </span>号或<span class="number"> 1 </span>号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。</span><br><span class="line">我们从<span class="number"> 2 </span>号加油站出发，可以获得<span class="number"> 4 </span>升汽油。 此时油箱有 =<span class="number"> 0 </span>+<span class="number"> 4 </span>=<span class="number"> 4 </span>升汽油</span><br><span class="line">开往<span class="number"> 0 </span>号加油站，此时油箱有<span class="number"> 4 </span>-<span class="number"> 3 </span>+<span class="number"> 2 </span>=<span class="number"> 3 </span>升汽油</span><br><span class="line">开往<span class="number"> 1 </span>号加油站，此时油箱有<span class="number"> 3 </span>-<span class="number"> 3 </span>+<span class="number"> 3 </span>=<span class="number"> 3 </span>升汽油</span><br><span class="line">你无法返回<span class="number"> 2 </span>号加油站，因为返程需要消耗<span class="number"> 4 </span>升汽油，但是你的油箱只有<span class="number"> 3 </span>升汽油。</span><br><span class="line">因此，无论怎样，你都不可能绕环路行驶一周。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>gas.length == n</code></li><li><code>cost.length == n</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li></ul><h2 id="题解-14">题解</h2><p>这题其实问题在于如何剪枝，举个例子，如果从0出发醉多可以到达k，那么从0-k之内任何点出发，最多也只可以到达k，所以这时候下一个出发点就可以直接考虑k+1了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canCompleteCircuit</span><span class="params">(gas []<span class="type">int</span>, cost []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//假设我们的起点是0</span></span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line">    n := <span class="built_in">len</span>(gas)</span><br><span class="line">    <span class="keyword">for</span> start&lt;n &#123;</span><br><span class="line">        end := start</span><br><span class="line">        rest := gas[start]</span><br><span class="line">        <span class="comment">//只要油还够，就能往前走了</span></span><br><span class="line">        <span class="keyword">for</span> rest&gt;= cost[end]&#123;</span><br><span class="line">            rest = rest - cost[end] + gas[(end+<span class="number">1</span>)%n]</span><br><span class="line">            end = (end + <span class="number">1</span>) % n</span><br><span class="line">            <span class="comment">//如果到达起点，证明能环绕</span></span><br><span class="line">            <span class="keyword">if</span> end==start&#123;</span><br><span class="line">                <span class="keyword">return</span> start</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果到达点在起点前，就一定无法抵达了，因为从0到起点-1出发都是不不能环绕的，起点到n也是不能环绕的</span></span><br><span class="line">        <span class="keyword">if</span> end &lt; start&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//更换剪枝后的新起点</span></span><br><span class="line">            start = end + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>15.分发糖果</h1><h2 id="题目描述-15">题目描述</h2><p><a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a></p><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：ratings </span>=<span class="string"> [1,0,2]</span></span><br><span class="line"><span class="string">输出：5</span></span><br><span class="line"><span class="string">解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：ratings </span>=<span class="string"> [1,2,2]</span></span><br><span class="line"><span class="string">输出：4</span></span><br><span class="line"><span class="string">解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。</span></span><br><span class="line"><span class="string">     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == ratings.length</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li></ul><h2 id="题解-15">题解</h2><p>标准贪心，左边右边各贪一次</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">candy</span><span class="params">(ratings []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//我个人喜欢定义一个数组走两遍，而不是定义俩数组</span></span><br><span class="line">    res := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(ratings))</span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i&lt;<span class="built_in">len</span>(ratings); i++&#123;</span><br><span class="line">        <span class="keyword">if</span> ratings[i]&gt;ratings[i<span class="number">-1</span>]&#123;</span><br><span class="line">            res[i] = res[i<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[i] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum := res[<span class="built_in">len</span>(ratings)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(ratings)<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--&#123;</span><br><span class="line">        <span class="keyword">if</span> ratings[i] &gt; ratings[i+<span class="number">1</span>] &amp;&amp; res[i]&lt;res[i+<span class="number">1</span>]+<span class="number">1</span>&#123;</span><br><span class="line">            res[i] = res[i+<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum += res[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>16.接雨水</h1><h2 id="题目描述-16">题目描述</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></p><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [<span class="number">0,1,0,2</span>,<span class="number">1,0,1,3</span>,<span class="number">2,1,2,1</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：上面是由数组 [<span class="number">0,1,0,2</span>,<span class="number">1,0,1,3</span>,<span class="number">2,1,2,1</span>] 表示的高度图，在这种情况下，可以接 <span class="number">6</span> 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height = <span class="string">[4,2,0,3,2,5]</span></span><br><span class="line">输出：<span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 105</code></li></ul><h2 id="题解-16">题解</h2><p>标准双指针问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> num1&lt;num2&#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left := <span class="number">0</span></span><br><span class="line">    right := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">    leftMax := <span class="number">0</span></span><br><span class="line">    rightMax := <span class="number">0</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;=right &#123;</span><br><span class="line">        <span class="keyword">if</span> height[left]&lt;=height[right]&#123;</span><br><span class="line">            leftMax = max(height[left],leftMax)</span><br><span class="line">            sum += leftMax - height[left]</span><br><span class="line">            left++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            rightMax = max(height[right],rightMax)</span><br><span class="line">            sum += rightMax - height[right]</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>17.罗马数字转整数</h1><h2 id="题目描述-17">题目描述</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line"><span class="built_in">I</span>             <span class="number">1</span></span><br><span class="line"><span class="variable">V</span>             <span class="number">5</span></span><br><span class="line"><span class="variable">X</span>             <span class="number">10</span></span><br><span class="line"><span class="variable">L</span>             <span class="number">50</span></span><br><span class="line"><span class="built_in">C</span>             <span class="number">100</span></span><br><span class="line"><span class="built_in">D</span>             <span class="number">500</span></span><br><span class="line"><span class="variable">M</span>             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;III&quot;</span></span><br><span class="line"><span class="section">输出: 3</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;IV&quot;</span></span><br><span class="line"><span class="section">输出: 4</span></span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;IX&quot;</span></span><br><span class="line"><span class="section">输出: 9</span></span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;LVIII&quot;</span></span><br><span class="line"><span class="section">输出: 58</span></span><br><span class="line"><span class="section">解释: L = 50, V= 5, III = 3.</span></span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;MCMXCIV&quot;</span></span><br><span class="line"><span class="section">输出: 1994</span></span><br><span class="line"><span class="section">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://baike.baidu.com/item/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/772296">罗马数字 - 百度百科</a>。</li></ul><h2 id="题解-17">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    res := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;<span class="string">&#x27;I&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;V&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;L&#x27;</span>:<span class="number">50</span>,<span class="string">&#x27;C&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;D&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;M&#x27;</span>:<span class="number">1000</span>&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i&lt;<span class="built_in">len</span>(s); i++&#123;</span><br><span class="line">        <span class="keyword">if</span> i==<span class="built_in">len</span>(s)<span class="number">-1</span> &#123;</span><br><span class="line">            sum+=res[s[i]]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> res[s[i]]&lt;res[s[i+<span class="number">1</span>]]&#123;</span><br><span class="line">            sum -= res[s[i]]</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sum += res[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>18.整数转罗马数字</h1><h2 id="题目描述-18">题目描述</h2><p><a href="https://leetcode.cn/problems/integer-to-roman/">12. 整数转罗马数字</a></p><p>七个不同的符号代表罗马数字，其值如下：</p><table><thead><tr><th>符号</th><th>值</th></tr></thead><tbody><tr><td>I</td><td>1</td></tr><tr><td>V</td><td>5</td></tr><tr><td>X</td><td>10</td></tr><tr><td>L</td><td>50</td></tr><tr><td>C</td><td>100</td></tr><tr><td>D</td><td>500</td></tr><tr><td>M</td><td>1000</td></tr></tbody></table><p>罗马数字是通过添加从最高到最低的小数位值的转换而形成的。将小数位值转换为罗马数字有以下规则：</p><ul><li>如果该值不是以 4 或 9 开头，请选择可以从输入中减去的最大值的符号，将该符号附加到结果，减去其值，然后将其余部分转换为罗马数字。</li><li>如果该值以 4 或 9 开头，使用 <strong>减法形式</strong>，表示从以下符号中减去一个符号，例如 4 是 5 (<code>V</code>) 减 1 (<code>I</code>): <code>IV</code> ，9 是 10 (<code>X</code>) 减 1 (<code>I</code>)：<code>IX</code>。仅使用以下减法形式：4 (<code>IV</code>)，9 (<code>IX</code>)，40 (<code>XL</code>)，90 (<code>XC</code>)，400 (<code>CD</code>) 和 900 (<code>CM</code>)。</li><li>只有 10 的次方（<code>I</code>, <code>X</code>, <code>C</code>, <code>M</code>）最多可以连续附加 3 次以代表 10 的倍数。你不能多次附加 5 (<code>V</code>)，50 (<code>L</code>) 或 500 (<code>D</code>)。如果需要将符号附加4次，请使用 <strong>减法形式</strong>。</li></ul><p>给定一个整数，将其转换为罗马数字。</p><p><strong>示例 1：</strong></p><p>**输入：**num = 3749</p><p><strong>输出：</strong> “MMMDCCXLIX”</p><p><strong>解释：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3000 = MMM 由于<span class="number"> 1000 </span>(M) +<span class="number"> 1000 </span>(M) +<span class="number"> 1000 </span>(M)</span><br><span class="line"><span class="number"> 700 </span>= DCC 由于<span class="number"> 500 </span>(D) +<span class="number"> 100 </span>(C) +<span class="number"> 100 </span>(C)</span><br><span class="line"> <span class="number"> 40 </span>= XL 由于<span class="number"> 50 </span>(L) 减<span class="number"> 10 </span>(X)</span><br><span class="line">  <span class="number"> 9 </span>= IX 由于<span class="number"> 10 </span>(X) 减<span class="number"> 1 </span>(I)</span><br><span class="line">注意：49 不是<span class="number"> 50 </span>(L) 减<span class="number"> 1 </span>(I) 因为转换是基于小数位</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p>**输入：**num = 58</p><p><strong>输出：</strong>“LVIII”</p><p><strong>解释：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">50</span> = L</span><br><span class="line"> <span class="attr">8</span> = VIII</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p>**输入：**num = 1994</p><p><strong>输出：</strong>“MCMXCIV”</p><p><strong>解释：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1000</span> = M</span><br><span class="line"> <span class="attr">900</span> = CM</span><br><span class="line">  <span class="attr">90</span> = XC</span><br><span class="line">   <span class="attr">4</span> = IV</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 3999</code></li></ul><h2 id="题解-18">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">//说实话，感觉这个题目纯是逆天题目</span></span><br><span class="line">    <span class="comment">//但是还有个细节要讲，这里不能定义map来存对应关系</span></span><br><span class="line">    <span class="comment">//因为go的map底层是真无序，也不能说无序，是按照hash序</span></span><br><span class="line">    <span class="comment">//严格来说，要么定义两个数组，要么定义一个结构体数组</span></span><br><span class="line">    res := []<span class="keyword">struct</span>&#123;</span><br><span class="line">        value <span class="type">int</span></span><br><span class="line">        symbol <span class="type">string</span></span><br><span class="line">    &#125;&#123;&#123;<span class="number">1000</span>,<span class="string">&quot;M&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">900</span>,<span class="string">&quot;CM&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">500</span>,<span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">400</span>,<span class="string">&quot;CD&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">100</span>,<span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">90</span>,<span class="string">&quot;XC&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">50</span>,<span class="string">&quot;L&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">40</span>,<span class="string">&quot;XL&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">10</span>,<span class="string">&quot;X&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>,<span class="string">&quot;IX&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="string">&quot;V&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="string">&quot;IV&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="string">&quot;I&quot;</span>&#125;&#125;</span><br><span class="line">    str := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> num&gt;<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _,st := <span class="keyword">range</span> res&#123;</span><br><span class="line">            <span class="keyword">for</span> num&gt;=st.value&#123;</span><br><span class="line">                num -= st.value</span><br><span class="line">                str += st.symbol</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>19.最后一个单词的长度</h1><h2 id="题目描述-19">题目描述</h2><p><a href="https://leetcode.cn/problems/length-of-last-word/">58. 最后一个单词的长度</a></p><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最后一个单词是“World”，长度为 <span class="number">5</span>。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;   fly me   to   the moon  &quot;</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最后一个单词是“moon”，长度为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;luffy is still joyboy&quot;</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最后一个单词是长度为 <span class="number">6</span> 的“joyboy”。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅有英文字母和空格 <code>' '</code> 组成</li><li><code>s</code> 中至少存在一个单词</li></ul><h2 id="题解-19">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//这题其实是一个很简单的题，问题就是在于go有没有提供对string 的strip和slipt方法</span></span><br><span class="line">    <span class="comment">//strings包提供了一些操作，包括TrimSpace和Trim操作</span></span><br><span class="line">    <span class="comment">//同时strings也提供了Split方法</span></span><br><span class="line">    s = strings.Trim(s, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    sSplit := strings.Split(s,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    n := <span class="built_in">len</span>(sSplit)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(sSplit[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然其实这题的本意肯定不是调库，搓一下吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    start := <span class="built_in">len</span>(s)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> s[start]==<span class="string">&#x27; &#x27;</span>&#123;</span><br><span class="line">        start--</span><br><span class="line">    &#125;</span><br><span class="line">    end := start</span><br><span class="line">    <span class="keyword">for</span> end&gt;=<span class="number">0</span>&amp;&amp;s[end]!=<span class="string">&#x27; &#x27;</span>&#123;</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start-end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>20.最长公共前缀</h1><h2 id="题目描述-20">题目描述</h2><p><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a></p><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 如果非空，则仅由小写英文字母组成</li></ul><h2 id="题解-20">题解</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(num1, num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num1</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    res := <span class="string">&quot;&quot;</span></span><br><span class="line">    n := math.MaxInt</span><br><span class="line">    <span class="keyword">for</span> _, str := <span class="keyword">range</span> strs&#123;</span><br><span class="line">        n = min(n,<span class="built_in">len</span>(str))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++&#123;</span><br><span class="line">        b := strs[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> _,str := <span class="keyword">range</span> strs&#123;</span><br><span class="line">            <span class="keyword">if</span> str[i] != b&#123;</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res+<span class="type">string</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习Golang的一些笔记</title>
      <link href="/posts/2052d729.html"/>
      <url>/posts/2052d729.html</url>
      
        <content type="html"><![CDATA[<h1>package</h1><p>这点其实和Java有点区别的，Java支持在任何包名下psvm的。</p><p>但是Go不同，go的主函数的包名必须是main</p><h1>变量声明</h1><p>四种方式，三种支持全局变量的声明，一种不支持</p><h2 id="支持全局变量的声明方式">支持全局变量的声明方式</h2><ol><li>var a int //默认值为0</li><li>var a int = 10</li><li>var a = 10</li></ol><p>这三种方式都支持全局变量的定义，感觉还是比较类似python的</p><h2 id="不支持全局变量的声明方式">不支持全局变量的声明方式</h2><p>a := 100</p><p>这种方式就更加类似于python了，在赋初值的时候会自动判断类型</p><p>这种方法只支持在函数体内声明变量</p><h2 id="和Java的区别">和Java的区别</h2><p>同时Go是一个很简洁的语言，如果一个变量声明了但是没有使用，这是会报错的。</p><p>提到报错这一点，其实go和java又是一个极端，go是不支持exception的，只有error</p><h1>const常量</h1><p>常量的特点是具有只读属性，不允许修改，和Java中的final以及cpp的const一致</p><p>所以可以用来定义枚举类型，配合iota来实现，第一行的iota的默认值为0</p><p>定义类似如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">BEIJING = <span class="literal">iota</span></span><br><span class="line">  SHANGHAI</span><br><span class="line">  SHENZHEN</span><br><span class="line">)</span><br><span class="line"><span class="comment">//这样就会出现BEIJING=0,SHANGHAI=1,SHENZHEN=2</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">BEIJING = <span class="number">10</span>*<span class="literal">iota</span></span><br><span class="line">  SHANGHAI</span><br><span class="line">  SHENZHEN</span><br><span class="line">)</span><br><span class="line"><span class="comment">//这样定义的话就会出现BEIJING=0,SHANGHAI=10,SHENZHEN=20</span></span><br><span class="line"><span class="comment">//iota的特性是按照行来累加的，后续如果没有定义值，就和上一行相同</span></span><br><span class="line"><span class="comment">//例如定义如下：</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">a, b = <span class="literal">iota</span>+<span class="number">1</span>, <span class="literal">iota</span>+<span class="number">2</span><span class="comment">//a=1,b=2</span></span><br><span class="line">  c, d<span class="comment">//c=2,d=3</span></span><br><span class="line">  e, f<span class="comment">//e=3,f=4</span></span><br><span class="line">  g, h = <span class="literal">iota</span>*<span class="number">2</span>, <span class="literal">iota</span>*<span class="number">3</span><span class="comment">//g=6,h=9</span></span><br><span class="line">  i, k<span class="comment">//i=8,k=12</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>多返回值</h1><p>go感觉在这一点上和python很像，支持多返回值</p><h2 id="返回值定义">返回值定义</h2><p>首先go的返回值包括形参的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(a <span class="type">string</span>, b <span class="type">bool</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我要定义多个返回值，那么可以用类似于python元组的形式定义返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span>(<span class="type">int</span> ,<span class="type">string</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然也可以返回多个有形参名的返回值，这样返回也可以</span></span><br><span class="line"><span class="comment">//同时，r1和r2也是形参，默认值为0，在go里默认值都是0，字符串是&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span>(r1 <span class="type">int</span>, r2 <span class="type">string</span>)&#123;</span><br><span class="line">  r1 = <span class="number">0</span></span><br><span class="line">  r2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然如果类型相同也可以这么返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func4</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span>(r1, r2 <span class="type">int</span>)&#123;</span><br><span class="line">  r1 = <span class="number">0</span></span><br><span class="line">  r2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>导包</h1><p>导包一般会执行到init()函数才会继续执行，一般来说，init函数会早于main函数执行</p><p>同时，go有个比较有意思的点，就是对外放开的方法首字母要大写。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式整理</title>
      <link href="/posts/constructmode.html"/>
      <url>/posts/constructmode.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式是设计模式中最简单的一种设计模式，常用于数据库连接池、Spring默认的bean等</p><p>单例模式是一种<strong>创建型模型</strong>，这个词我们后面还会提到。</p><p>一个类负责创建自己的对象，但是需要确保只有一个对象被创建了，这个类提供了一种访问它对象的唯一方式。同时需要隐藏自己的构造方法。</p><p>一般单例模式都是支持两种实现思路，一种是饿汉式，一种是懒汉式，饿汉式就是在类加载时就实例化一个对象，而懒汉式则是需要第一次使用的时候才实例化对象，但是懒汉式的实现方式一般需要通过双重校验也就是double cheack的方式来实现。</p><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>饿汉式的实现是比较简单的，也就是在类加载的时候就实例化对象，但是存在一个问题，这个类加载了但是我没有使用，会有额外的空间浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonHungry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingletonHungry</span> <span class="variable">singletonHungry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonHungry</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonHungry</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonHungry <span class="title function_">getSingletonHungry</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonHungry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该成员变量也就是唯一实例化的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同时为了防止被初始化，需要将构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供静态方法用来获取唯一单例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">/*这里需要使用类级别的锁而不是直接锁住singleton的原因是</span></span><br><span class="line"><span class="comment">            *如果singleton==null，那么就会抛出NullPointerException</span></span><br><span class="line"><span class="comment">            *异常原因是:Cannot enter synchronized block because </span></span><br><span class="line"><span class="comment">            *&quot;Singleton.singleton&quot; is null</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton==<span class="literal">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton1</span> <span class="operator">=</span> Singleton.getSingleton();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton2</span> <span class="operator">=</span> Singleton.getSingleton();</span><br><span class="line">        System.out.println(singleton1==singleton2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式的核心是，允许通过代理对象控制对被代理对象的访问。主要用于在访问对象时添加额外的功能。</p><p>代理模式在Java中可以分为静态代理和动态代理，本质上的目的都是一致的。</p><p>只不过静态代理需要手动编写代理类，代理类需要实现与目标相同的接口，在内部需要持有一个目标对象的引用。</p><p>动态代理则是运行时动态生成的，不需要为每个对象手动编写代理类，但是目标对象至少必须实现一个接口。</p><p>接下来我们就来尝试以对方法加log的任务为例，实现两种代理。</p><h2 id="共用代码"><a href="#共用代码" class="headerlink" title="共用代码"></a>共用代码</h2><p>两种代码都需要有一个接口和对接口的实现，所以在这里定义一个接口和并给出它的一个实现。</p><p>其实写到动态代理那块的时候，我才意识到这个Method接口的取名并不太妙，因为Java反射包里就有一个类叫Method，但是事已至此，实在是懒得改了，就先这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodImpl</span> <span class="keyword">implements</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dealing with method&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Finished dealing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="静态带来"><a href="#静态带来" class="headerlink" title="静态带来"></a>静态带来</h2><p>这时候我们就实现一个方法，来代理这个MethodImpl，目的是要给它加上执行时间的log，当然为了演示简单起见，我们直接打印在控制台上了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Method target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StaticProxy</span><span class="params">(Method target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dateStart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        target.method();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dateFinished</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeCost</span> <span class="operator">=</span> dateFinished.getTime()-dateStart.getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost time:&quot;</span>+timeCost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">staticProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticProxy</span>(<span class="keyword">new</span> <span class="title class_">MethodImpl</span>());</span><br><span class="line">        staticProxy.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代理其实存在一个问题，灵活性较低，因为每当需要为一个新的服务类型提供代理时，都需要手动去编写相应的代理类。</p><p>但是Java为我们提供了动态代理类的实现方式。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理的实现其实是依赖Java反射包下的<code>Proxy</code>类的<code>newProxyInstance()</code>方法，需要实现一个<code>InvocationHandler</code>接口，并重写<code>invoke</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDynamicProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyDynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">        Object target;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyDynamicProxyHandler</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.target = target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, java.lang.reflect.Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">dateStart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">dateFinished</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="type">long</span> <span class="variable">timeCost</span> <span class="operator">=</span> dateFinished.getTime()-dateStart.getTime();</span><br><span class="line">            System.out.println(<span class="string">&quot;Cost time:&quot;</span>+timeCost);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object method)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                method.getClass().getClassLoader(), method.getClass().getInterfaces(),<span class="keyword">new</span> <span class="title class_">MyDynamicProxyHandler</span>(method)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">staticProxy</span> <span class="operator">=</span> (Method) MyDynamicProxy.getProxy(<span class="keyword">new</span> <span class="title class_">MethodImpl</span>());</span><br><span class="line">        staticProxy.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p> 装饰者模式与代理模式看起来似乎有一点相似，但是两者的侧重点不同。</p><ul><li><strong>代理模式</strong>更侧重于控制对对象的访问，可能包括权限验证、日志记录、延迟加载等功能，而不会改变原有对象的行为。</li><li><strong>装饰者模式</strong>则专注于在不改变对象接口的前提下，动态地为其添加新的行为或功能，更加注重功能的扩展性和灵活性。</li></ul><p>我们做一个简单的实现就可以理解了。</p><p>首先还是定义一个接口，我希望它能提供method方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是对它的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OriginMethod</span> <span class="keyword">implements</span> <span class="title class_">MyMethod</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;It is the origin method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们要实现装饰器，首先是装饰器要继承原始接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyMethodDecorate</span> <span class="keyword">extends</span> <span class="title class_">MyMethod</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现装饰器1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecorateMethod</span> <span class="keyword">implements</span> <span class="title class_">MyMethodDecorate</span>&#123;</span><br><span class="line">    MyMethod originMethod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecorateMethod</span><span class="params">(MyMethod originMethod)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.originMethod = originMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I decorate it with first decoration!&quot;</span>);</span><br><span class="line">        originMethod.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现装饰器2并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecorateMethod2</span> <span class="keyword">implements</span> <span class="title class_">MyMethodDecorate</span>&#123;</span><br><span class="line">    MyMethod originMethod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecorateMethod2</span><span class="params">(MyMethod originMethod)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.originMethod = originMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I decorate it with second decoration!&quot;</span>);</span><br><span class="line">        originMethod.method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyMethod</span> <span class="variable">originMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OriginMethod</span>();</span><br><span class="line">        originMethod = <span class="keyword">new</span> <span class="title class_">DecorateMethod</span>(originMethod);</span><br><span class="line">        originMethod = <span class="keyword">new</span> <span class="title class_">DecorateMethod2</span>(originMethod);</span><br><span class="line">        originMethod.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I decorate it with second decoration!</span><br><span class="line">I decorate it with first decoration!</span><br><span class="line">It is the origin method</span><br></pre></td></tr></table></figure><p>装饰器模式和代理模式的核心差距就在于，装饰器把它装饰成一个功能更多的，更加多样化的内容，而代理模式的核心是控制对代理方法的访问。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的增加和扩容原理</title>
      <link href="/posts/hash_map_about.html"/>
      <url>/posts/hash_map_about.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>HashMap的知识，看八股肯定是不够的，所以来看看源码。</p><p>看很多源码之后才知道Java的一些类的实现有多么优雅，我只能用优雅来形容。</p><h1>源码解读</h1><p>我主要是从两个方面来看这部分的源码，一个是创建，一个是添加。其实重点还是添加，只不过我在添加的时候看到了懒初始化的操作，所以回去看了一眼创建。</p><p>添加操作关注的主要有两个部分，</p><ol><li>桶深过深转红黑树的操作</li><li>达到负载因子标准之后的扩容操作</li></ol><h2 id="创建">创建</h2><p>下面这行代码，请问HashMap的数组是在哪一行代码处创建的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapLearn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//1</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>, <span class="number">0.75F</span>);</span><br><span class="line">        <span class="comment">//2</span></span><br><span class="line">      hashMap.put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是在2处才创建。</p><p>还是看源码，可以看到，通过构造函数初始化的时候，只是赋值了一些容量类的参数。</p><p>也就是说，HashMap内部数组的创建，是懒式创建的。这点在我们后面看put源码的时候会看到。</p><p>懒初始化可以延迟资源的分配直到真正需要的时候，从而提高资源利用率和程序启动速度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &#123;<span class="doctag">@code</span> HashMap&#125; with the specified initial</span></span><br><span class="line"><span class="comment"> * capacity and load factor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment"> *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也未必是用了就是好的，其实懒初始化也会有别的可能的问题：</p><ol><li><strong>初次访问延迟</strong>：由于实际的资源分配被推迟到第一次使用时，这可能会导致初次访问时出现明显的延迟。</li><li><strong>并发问题</strong>：在多线程环境下，如果没有适当的同步机制，懒创建可能导致竞态条件。比如两个线程几乎同时检测到资源未初始化并尝试同时初始化它，这可能会引起错误或不必要的重复工作。</li><li><strong>复杂性增加</strong>：为了确保懒创建的安全性和效率，特别是在线程安全的场景下，可能需要引入额外的逻辑控制，如双重检查锁定模式(Double-Checked Locking)，增加了代码的复杂性和维护难度。</li></ol><h2 id="加入">加入</h2><p>put的源码其实也不是特别多，或者说其实HashMap的源码部分就不是特别多，我把我的思路及分析都写在了注释中了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">  <span class="comment">//太优雅了，懒汉创建，但是如果不加锁的话可能会出现竞争问题</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">  <span class="comment">//如果桶的位置为空，直接就加入了</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">      <span class="comment">//如果不是链表的存储方式而是红黑树，那就得用树的插入方式</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//否则就寻找链表的最后一个节点或者对应的等key节点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">              <span class="comment">//如果找遍了全部的桶都没找到，就创建一个新节点加在最后</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                  <span class="comment">//如果桶深度等于8，同时还需要转成红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//找到了对应的key</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//没找到对应的key，在上面加了Node，同时要修改modCount</span></span><br><span class="line">    ++modCount;</span><br><span class="line">  <span class="comment">//size超过阈值，就要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们先看看扩容吧，其实转红黑树的代码我未必能看懂，所以我还是决定先看看扩容。</p><h2 id="扩容">扩容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//如果扩容的时候，数组的长度已经大于等于最大容量了，就直接把阈值放飞了</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//双倍扩容的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//初始化定容量的情况</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//定义新的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">  <span class="comment">//直接将原表地址替换为新表地址</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//开始迁移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="comment">//在第一步的时候就把原数组的对象引用释放掉</span></span><br><span class="line">              <span class="comment">//这部分操作其实是存疑的，这么做一部分原因是为了减少原数组引用对对象带来的影响</span></span><br><span class="line">              <span class="comment">//这么做是为了支持多线程，但是这样反而会在多线程同时扩容数组的时候带来数据的丢失</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                  <span class="comment">//如果是单个节点，直接迁移，因为是高位扩容，所以直接放不会冲突</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  <span class="comment">//关于红黑树的拆分放桶的方法，这里就不多扩展了，后面补充在附录里吧</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                  <span class="comment">//然后就是按照链表的顺序开始</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                      <span class="comment">//然后这个时候就是进行while循环的处理</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                      <span class="comment">//看这个节点是不是留在原桶,因为需要维护两个桶的尾</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                      <span class="comment">//如果不在原桶就要放到高位桶里</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                  <span class="comment">//原桶的放到原桶位置</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="comment">//高位桶的放到高位</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩容这部分其实就些内容，其实难点还是在红黑树的那一块，但是我比较懒散没有详细去看。</p><h2 id="桶过深转红黑树">桶过深转红黑树</h2><p>主要是通过这一个方法来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果数组容量小于 MIN_TREEIFY_CAPACITY，则优先扩容，这个值是64</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将链表转换为红黑树</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">          <span class="comment">//如果是第一个节点，那么就是头节点，把p给hd</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">          <span class="comment">//如果不是，就是构建前后关系</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">      <span class="comment">//然后就是调用这个转红黑树的方法</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是最核心的部分了，也就是红黑树的构建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Forms tree of the nodes linked from this node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="built_in">this</span>, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">      <span class="comment">//遍历节点</span></span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">      <span class="comment">//首先是清空左右，为了防止遗留问题</span></span><br><span class="line">        x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">//如果是第一个节点，就把它设置为根节点，无父亲节点，非红节点</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="literal">null</span>;</span><br><span class="line">            x.red = <span class="literal">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//否则就按照key的hash进行红黑树构建了</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">          <span class="comment">//用于存储键的比较类（如果键实现了 Comparable 接口）。</span></span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">          <span class="comment">//从根节点开始遍历</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">              <span class="comment">//dir表示当前节点应该插入到左子树（-1）还是右子树（1）。</span></span><br><span class="line">                <span class="type">int</span> dir, ph;</span><br><span class="line">                <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">              <span class="comment">//哈希值比较：</span></span><br><span class="line">                <span class="comment">//如果当前节点的哈希值小于 p 的哈希值，则插入到左子树。</span></span><br><span class="line">                <span class="comment">//如果当前节点的哈希值大于 p 的哈希值，则插入到右子树。</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">              <span class="comment">//如果哈希值相等，则进一步比较键值：</span></span><br><span class="line">                <span class="comment">//如果键实现了 Comparable 接口，则使用 Comparable 进行比较。</span></span><br><span class="line">                <span class="comment">//如果键未实现 Comparable 或比较结果相等，则调用 tieBreakOrder 方法进行仲裁。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                        (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"><span class="comment">//找到对应的插入位置</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                  <span class="comment">//平衡红黑树</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//绑定头节点到数组上</span></span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平衡红黑树部分的代码感觉有点不太想看说实话，过段时间再看吧。</p><h1>ConcurrentHashMap</h1><p>其实我们可以关注到，HashMap几乎没有实现对多线程的关注，所以他是线程不安全的，那么ConcurrentHashMap又是如何实现线程的安全呢？其实这个比较容易被问到的问题，几乎所有的八股都会说什么分段锁啊，CAS操作啊，但是具体的源码实现是什么样子呢？很少有人关注，所以我这里来看一眼吧。</p><h2 id="构造方法">构造方法</h2><p>首先还是看看构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment"> * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;), initial</span></span><br><span class="line"><span class="comment"> * table density (&#123;<span class="doctag">@code</span> loadFactor&#125;), and number of concurrently</span></span><br><span class="line"><span class="comment"> * updating threads (&#123;<span class="doctag">@code</span> concurrencyLevel&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment"> * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment"> * given the specified load factor.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment"> * establishing the initial table size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> concurrencyLevel the estimated number of concurrently</span></span><br><span class="line"><span class="comment"> * updating threads. The implementation may use this value as</span></span><br><span class="line"><span class="comment"> * a sizing hint.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is</span></span><br><span class="line"><span class="comment"> * negative or the load factor or concurrencyLevel are</span></span><br><span class="line"><span class="comment"> * nonpositive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                         <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">  <span class="comment">//初始容量不能小于并发级别</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实没有太多的修改，主要是增加了并发级别，要求了初始容量不能小于并发级别，其余的与HashMap一致</p><p>接下来就看看插入操作到底是怎么实现保证一致性的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maps the specified key to the specified value in this table.</span></span><br><span class="line"><span class="comment"> * Neither the key nor the value can be null.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The value can be retrieved by calling the &#123;<span class="doctag">@code</span> get&#125; method</span></span><br><span class="line"><span class="comment"> * with a key that is equal to the original key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &#123;<span class="doctag">@code</span> key&#125;, or</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> null&#125; if there was no mapping for &#123;<span class="doctag">@code</span> key&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified key or value is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">  <span class="comment">//spread 方法：</span></span><br><span class="line">    <span class="comment">//对键的哈希值进行重新计算，以减少哈希冲突。</span></span><br><span class="line">    <span class="comment">//公式为：(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS，其中 HASH_BITS 是一个掩码。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh; K fk; V fv;</span><br><span class="line">      <span class="comment">//如果tab为空，初始化tab，为了阅读的连贯性，我们后面再看这个方法</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">      <span class="comment">//如果为空桶，使用casTabAt</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//这个MOVED其实是个特殊标记，表示当前正在进行扩容操作</span></span><br><span class="line">      <span class="comment">//static final int MOVED     = -1; // hash for forwarding nodes</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">          <span class="comment">//这个方法还是挺核心的，主要作用是检测当前是否正在进行扩容操作，并参与协助完成扩容任务。</span></span><br><span class="line">          <span class="comment">//如果发现某个桶（bucket）已经被标记为正在迁移（通过 ForwardingNode 标记），则该方法会尝试参与到迁移过程中。</span></span><br><span class="line"><span class="comment">//它的主要目标是加速扩容过程，通过允许多个线程并行地完成数据迁移。</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (onlyIfAbsent <span class="comment">// check first node without acquiring lock</span></span><br><span class="line">                 &amp;&amp; fh == hash</span><br><span class="line">                 &amp;&amp; ((fk = f.key) == key || (fk != <span class="literal">null</span> &amp;&amp; key.equals(fk)))</span><br><span class="line">                 &amp;&amp; (fv = f.val) != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> fv;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//如果对应问题都没有出现，那就对f枷锁，然后把节点放入到对应的位置中去，这里的思路其实与HashMap一致</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> ReservationNode)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Recursive update&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们最后再看一眼InitTable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">  <span class="comment">//for循环，组钥匙cas操作</span></span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="comment">//如果sizeCtl&lt;0，表示有其他值在init，就把时间片让出去</span></span><br><span class="line">            Thread.<span class="keyword">yield</span>(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">      <span class="comment">//否则就开始CAS操作，设置sizeCtl为-1，表示自己要初始化了</span></span><br><span class="line">      <span class="comment">//初始化完成之后就break即可</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSetInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//但是在CAS成功之后，会判断table是不是为空，如果为空才执行初始化，否则就直接进入finally段，单后break了。</span></span><br><span class="line">              <span class="comment">//也就是CAS自旋成功之后才会break这个循环</span></span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>完结</h1><p>基本完结啦，后面如果我有时间的话会认真看看红黑树部分的代码的，但是现在可能对我来说留给我的时间确实不多了</p><h1>附录，红黑树的split，注释和代码均来自通义千问</h1><p>以下是 <code>TreeNode.split</code> 方法的核心逻辑（简化版）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// loHead 和 loTail 表示保留在原桶的节点链</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// hiHead 和 hiTail 表示需要移动到新桶的节点链</span></span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历红黑树的所有节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断节点属于哪个桶</span></span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将低桶（原桶）的节点放入新数组</span></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// 如果高桶也有节点，则需要保持红黑树结构</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将高桶（新桶）的节点放入新数组</span></span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>) <span class="comment">// 如果低桶也有节点，则需要保持红黑树结构</span></span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java删除集合中的元素</title>
      <link href="/posts/delete_ele_from_collection.html"/>
      <url>/posts/delete_ele_from_collection.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>我真的了解Java吗？这其实是我经常好奇的问题之一，什么叫了解一门语言。会用？能用？遇到问题会解决问题？</p><p>当然这只是随意的漫谈，聊回这篇博客本来的问题，如何删除集合中为固定值的元素。</p><h1>问题描述</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stringList.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;zhima&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;luck&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;karlyn&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;zhima&quot;</span>);</span><br><span class="line">        <span class="comment">//假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢</span></span><br><span class="line">      <span class="comment">//是否可以像下面这样的删除方法删除呢</span></span><br><span class="line">        <span class="keyword">for</span> (String str:stringList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.equals(<span class="string">&quot;zhima&quot;</span>))&#123;</span><br><span class="line">                stringList.remove(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是否定的，会抛出异常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.base/java.util.ArrayList<span class="variable">$Itr</span>.checkForComodification(ArrayList.java:1013)</span><br><span class="line">at java.base/java.util.ArrayList<span class="variable">$Itr</span>.next(ArrayList.java:967)</span><br><span class="line">at CollectionDelete.main(CollectionDelete.java:14)</span><br></pre></td></tr></table></figure><h1>探究原因</h1><p>其实我们应该能理解无法删除的原因，因为还在遍历这个集合，但是我们已经在修改这个集合了，其实这是不合理的，这会导致我们遍历的错误。但是我们还是要从源码的角度来看看，抛这个异常是怎么实现的。</p><p>首先，异常并不是在删除的时候抛出，而是删除完成之后，去寻找下一个元素的时被抛出的，所以抛出这个异常的不是remove方法，而是<code>for (String str:stringList)</code>的操作</p><p>这个操作叫做增强型循环，也叫for-each循环，是Java中典型的语法糖之一，这个语法糖在编译的时候有两种情况。</p><p>如果遍历的是一个数组的话，编译的时候等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> numbers[i];</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是集合的话，编译的时候等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = stringList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再来看看ArrayList的Itr的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prevent creating a synthetic constructor</span></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们，当调用Itr.next()方法的时候会调用<code>checkForComodification();</code>方法</p><p>这个方法实际上是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较修改次数是否和期待的修改次数相同，在定义迭代器的时候，会直接设置为List的modCount值，而如果调用List.remove操作，则会修改modCount的值，具体见下面的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment"> * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment"> * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> i&#125; such that</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Objects.equals(o, get(i))&#125;</span></span><br><span class="line"><span class="comment"> * (if such an element exists).  Returns &#123;<span class="doctag">@code</span> true&#125; if this list</span></span><br><span class="line"><span class="comment"> * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment"> * changed as a result of the call).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list contained the specified element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] es = elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    found: &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (es[i] == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">break</span> found;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(es[i]))</span><br><span class="line">                    <span class="keyword">break</span> found;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fastRemove(es, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment"> * return the value removed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(Object[] es, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> newSize;</span><br><span class="line">    <span class="keyword">if</span> ((newSize = size - <span class="number">1</span>) &gt; i)</span><br><span class="line">        System.arraycopy(es, i + <span class="number">1</span>, es, i, newSize - i);</span><br><span class="line">    es[size = newSize] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用增强型循环的时候，其实并没有新建一个迭代器，而是直接使用了ArrayList的内部类Itr的next方法，该方法会用expectedModCount和ArrayList对象的modCount进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The returned iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an iterator over the elements in this list in proper sequence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们的for-each循环里的删除之后，再次调用迭代器之后就会出现迭代器期待的修改次数和实际修改次数的不匹配。</p><h1>如何删除</h1><p>那么实际上该如何删除呢？</p><p>迭代器为我们提供了一种删除方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stringList.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;zhima&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;luck&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;karlyn&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;zhima&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; stringIterator = stringList.iterator();</span><br><span class="line">        <span class="comment">//假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢</span></span><br><span class="line">        <span class="keyword">while</span>(stringIterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> stringIterator.next();</span><br><span class="line">            <span class="keyword">if</span>(str.equals(<span class="string">&quot;zhima&quot;</span>))&#123;</span><br><span class="line">                stringIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      System.out.println(stringList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是通过迭代器删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hello, good, luck, karlyn]</span><br></pre></td></tr></table></figure><p>那么迭代器的删除是如何实现的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是多做了一步工作，也就是更新了<code>expectedModCount</code>，这样他就会与modCount一致了，在进行下一次next()方法调用的时候就不会报错了。</p><h1>如果是Map呢？</h1><p>如果这段代码要删除的是Map中Value为指定值的Value呢？该如何删除呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;AA&quot;</span>.equals(entry.getValue())) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这时候其实我就又一点疑惑，我能不能用KeySet作为迭代器，然后使用迭代器删除KeySet中的Key呢？</p><p>同时我们又回存在疑惑，如果删除KeySet中的Key，但是没有处理Value，会不会有内存泄漏的风险呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDelete</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;AA&quot;</span>.equals(map.get(key))) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，回答第一个问题，能否删除，答案是能删除。</p><p>输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;2=BB, 4=CC&#125;</span><br></pre></td></tr></table></figure><p>那么会不会造成Value的内存泄漏呢？也就是说，是否还有指向Value的引用呢？或者说，再直白一些，HashMap的value集合是否还能获取到value呢？</p><p>我们先看看EntrySet的iterator方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntryIterator</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后我们接下来看找到EntryIterator，发现它继承了抽象类HashIterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">EntryIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.Entry&lt;K,V&gt; <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么我们接下来再看看KeySet的iterator方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span>     &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>(); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeyIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode().key; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ValueIterator</span> <span class="keyword">extends</span> <span class="title class_">HashIterator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">next</span><span class="params">()</span> &#123; <span class="keyword">return</span> nextNode().value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，无论是KeySet还是ValueSet的迭代器都是继承了HashIterator这个抽象类，那么他们是怎么提供删除的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HashIterator</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">    Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">    <span class="type">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">    <span class="type">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        Node&lt;K,V&gt;[] t = table;</span><br><span class="line">        current = next = <span class="literal">null</span>;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">nextNode</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] t;</span><br><span class="line">        Node&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">if</span> ((next = (current = e).next) == <span class="literal">null</span> &amp;&amp; (t = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; p = current;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        current = <span class="literal">null</span>;</span><br><span class="line">        removeNode(p.hash, p.key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们就发现了，它删除的其实就是current的Node，也就是说，其实删除的就是key value对。</p><p>或者换而言之，KeySet的迭代器，其实就是EntrySet的迭代器，只不过重写了next方法，让next的输出更少了一些。</p><p>至此，本文完结！</p><p>稚嫩的一次源码解读，写的不好，烦请见谅。</p><h1>补充一条</h1><p>其实在做这个实验的时候，我还发现了另一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;zhima&quot;</span>,<span class="string">&quot;karlyn&quot;</span>,<span class="string">&quot;nice&quot;</span>,<span class="string">&quot;day&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="string">&quot;luck&quot;</span>,<span class="string">&quot;zhima&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>使用Arrays.asList创建的List不能修改，也就是没有实现List接口的remove方法，如果对他remove的话，会报错不支持的操作异常,UnsupportedOperationException</p><p>这点在迭代器的接口里也考虑到了，真优雅啊Java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes from the underlying collection the last element returned</span></span><br><span class="line"><span class="comment"> * by this iterator (optional operation).  This method can be called</span></span><br><span class="line"><span class="comment"> * only once per call to &#123;<span class="doctag">@link</span> #next&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The behavior of an iterator is unspecified if the underlying collection</span></span><br><span class="line"><span class="comment"> * is modified while the iteration is in progress in any way other than by</span></span><br><span class="line"><span class="comment"> * calling this method, unless an overriding class has specified a</span></span><br><span class="line"><span class="comment"> * concurrent modification policy.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The behavior of an iterator is unspecified if this method is called</span></span><br><span class="line"><span class="comment"> * after a call to the &#123;<span class="doctag">@link</span> #forEachRemaining forEachRemaining&#125; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment"> * The default implementation throws an instance of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> UnsupportedOperationException&#125; and performs no other action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if the &#123;<span class="doctag">@code</span> remove&#125;</span></span><br><span class="line"><span class="comment"> *         operation is not supported by this iterator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if the &#123;<span class="doctag">@code</span> next&#125; method has not</span></span><br><span class="line"><span class="comment"> *         yet been called, or the &#123;<span class="doctag">@code</span> remove&#125; method has already</span></span><br><span class="line"><span class="comment"> *         been called after the last call to the &#123;<span class="doctag">@code</span> next&#125;</span></span><br><span class="line"><span class="comment"> *         method</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不能修改的原因">不能修改的原因</h2><p>通过 <code>Arrays.asList()</code> 创建的 <code>List</code> 是一个固定大小的列表（fixed-size list），它不能直接进行结构性修改（如添加或删除元素）。这是因为 <code>Arrays.asList()</code> 返回的是一个由数组支持的 <code>List</code> 实现，而不是一个普通的 <code>ArrayList</code>。</p><h3 id="具体原因">具体原因</h3><ol><li><strong><code>Arrays.asList()</code> 的实现</strong>：<ul><li><code>Arrays.asList()</code> 方法返回的是 <code>java.util.Arrays.ArrayList</code>，这是 <code>Arrays</code> 类中的一个内部静态类，而不是 <code>java.util.ArrayList</code>。</li><li>这个内部类的实现是对原始数组的一个包装，它的大小是固定的，与原始数组共享数据。</li></ul></li><li><strong>固定大小的限制</strong>：<ul><li>因为底层仍然是数组，所以不能动态调整大小。任何试图改变列表大小的操作（如 <code>add()</code> 或 <code>remove()</code>）都会抛出 <code>UnsupportedOperationException</code>。</li><li>但是，你可以对列表中的元素进行修改（例如通过索引设置新值），因为这不会改变数组的大小。</li></ul></li></ol><p>看源码！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">RandomAccess</span>, java.io.Serializable</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@java</span>.io.Serial</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span> <span class="comment">// Conditionally serializable</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"></span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(a, a.length, Object[].class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> size();</span><br><span class="line">            <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(<span class="built_in">this</span>.a, size,</span><br><span class="line">                                     (Class&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>[]&gt;) a.getClass());</span><br><span class="line">            System.arraycopy(<span class="built_in">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">                a[size] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">            <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> a[index];</span><br><span class="line">            a[index] = element;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            E[] a = <span class="built_in">this</span>.a;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (a[i] == <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(a[i]))</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">for</span> (E e : a) &#123;</span><br><span class="line">                action.accept(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(operator);</span><br><span class="line">            E[] a = <span class="built_in">this</span>.a;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                a[i] = operator.apply(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span> &#123;</span><br><span class="line">            Arrays.sort(a, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayItr</span>&lt;&gt;(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意我们看这个ArrayList，它其实是Arrays的一个内部类！</p><p>这也可以解释为什么asList一定要传引用类型的数组了，因为定义了范型！</p><p>为什么它能不实现remove和add接口呢？</p><p>那当然是因为它继承了抽象类AbstractList啊，这个抽象类直接对这两个方法抛异常了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sole constructor.  (For invocation by subclass constructors, typically</span></span><br><span class="line"><span class="comment">     * implicit.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list (optional</span></span><br><span class="line"><span class="comment">     * operation).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Lists that support this operation may place limitations on what</span></span><br><span class="line"><span class="comment">     * elements may be added to this list.  In particular, some</span></span><br><span class="line"><span class="comment">     * lists will refuse to add null elements, and others will impose</span></span><br><span class="line"><span class="comment">     * restrictions on the type of elements that may be added.  List</span></span><br><span class="line"><span class="comment">     * classes should clearly specify in their documentation any restrictions</span></span><br><span class="line"><span class="comment">     * on what elements may be added.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * This implementation calls &#123;<span class="doctag">@code</span> add(size(), e)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Note that this implementation throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125; unless</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #add(int, Object) add(int, E)&#125; is overridden.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &#123;<span class="doctag">@code</span> add&#125; operation</span></span><br><span class="line"><span class="comment">     *         is not supported by this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException if the class of the specified element</span></span><br><span class="line"><span class="comment">     *         prevents it from being added to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null and this</span></span><br><span class="line"><span class="comment">     *         list does not permit null elements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if some property of this element</span></span><br><span class="line"><span class="comment">     *         prevents it from being added to this list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        add(size(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * This implementation always throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException            &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException          &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException      &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * This implementation always throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException            &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException          &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException      &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * This implementation always throws an</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实ArrayList也继承了抽象类AbstractList，但是它自己重写了这两个方法！</p><p>至此，大完结！</p>]]></content>
      
      
      <categories>
          
          <category> 源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流的实现</title>
      <link href="/posts/stream_limit.html"/>
      <url>/posts/stream_limit.html</url>
      
        <content type="html"><![CDATA[<h1>常见的限流算法</h1><p>常见的几种限流算法如下：</p><ol><li>令牌桶</li><li>漏桶</li><li>滑动窗口</li><li>固定窗口</li></ol><p>我在面试的时候实现的方式就有点类似于4，面试官也提出会有突刺问题，后面问我怎么优化，因为我实在不会写令牌桶的算法，我就说了滑动窗口，更加细粒度的划分这块。</p><p>所以接下来实现一下漏桶和令牌桶吧</p><h2 id="漏桶">漏桶</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakyBucket</span> &#123;</span><br><span class="line">    <span class="comment">//定义漏桶速率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> qps;</span><br><span class="line">    <span class="comment">//定义漏桶</span></span><br><span class="line">    <span class="keyword">private</span> LinkedBlockingDeque&lt;Object&gt; waterBucket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initLeaky</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//使用TimeUnit组件，每隔1000/qps处理一个消息</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.MICROSECONDS.sleep(<span class="number">1000</span>/qps);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//漏水</span></span><br><span class="line">                    waterBucket.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(run);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeakyBucket</span><span class="params">(<span class="type">int</span> capacity,<span class="type">int</span> qps)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.qps = qps;</span><br><span class="line">        <span class="built_in">this</span>.waterBucket = <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(capacity);</span><br><span class="line">        <span class="comment">//创建完桶要开始滴水</span></span><br><span class="line">        initLeaky();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//这里一定要用offer，否则超容量就报错了</span></span><br><span class="line">        <span class="keyword">return</span> waterBucket.offer(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">LeakyBucket</span> <span class="variable">leakyBucket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeakyBucket</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="keyword">if</span>(leakyBucket.tryAcquire())&#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; at &quot;</span>+now+<span class="string">&quot; get success&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; at &quot;</span>+now+<span class="string">&quot; get error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;total num:&quot;</span>+ count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果并不严格限制1s只能获取一百个，而是只要桶还能装下即可获取流量允许，所以结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">1</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">2</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">3</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">4</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">5</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">6</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">7</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">8</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">9</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">10</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">11</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">12</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">13</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">14</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">15</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">16</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">17</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">18</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">19</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">20</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">21</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">22</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">23</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">24</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">25</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">26</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">27</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">28</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">29</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">30</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">31</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">32</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">33</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">34</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">35</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">36</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">37</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">38</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">39</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">40</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">41</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">42</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">43</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">44</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">45</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">46</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">47</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">48</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">49</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">50</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">51</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">52</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">53</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">54</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">55</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">56</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">57</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">58</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">59</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">60</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">61</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">62</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">63</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">64</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">65</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">66</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">67</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">68</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">69</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">70</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">71</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">72</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">73</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">74</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">75</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">76</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">77</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">78</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">79</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">80</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">81</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">82</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">83</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">84</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">85</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">86</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">87</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">88</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">89</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">90</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">91</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">92</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">93</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">94</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">95</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">96</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">97</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">98</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">99</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">100</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">101</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">102</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">103</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">104</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">105</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">106</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">107</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">108</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">109</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">110</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">111</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">112</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">113</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">114</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">115</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">116</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">117</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">118</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">119</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">120</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">121</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">122</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">123</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">124</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">125</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">126</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">127</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">128</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">129</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">130</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">131</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">132</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">133</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">134</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">135</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">136</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">137</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">138</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">139</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">140</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">141</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">142</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">143</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">144</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">145</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">146</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">147</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">148</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">149</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">150</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">151</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">152</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">153</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">154</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">155</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">156</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">157</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">158</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">159</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">160</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">161</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">162</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">163</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">164</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">165</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">166</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">167</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">168</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">169</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">170</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">171</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">172</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">173</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">174</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">175</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">176</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">177</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">178</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">179</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">180</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">181</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">182</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">183</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">184</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">185</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">186</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">187</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">188</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">189</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">190</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">191</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">192</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">193</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">194</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">195</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">196</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">197</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">198</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">199</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">56</span>:<span class="number">23</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">total</span> num:<span class="number">106</span></span><br></pre></td></tr></table></figure><p>可以看到，漏桶在处理突发流量上存在一定的问题，如果流量迅速打满这个桶，那么漏桶就会出现很长一段时间的不能获取。</p><p>这里主要是IO耗时，和无法模拟真实流量，所以不太好测试</p><h2 id="这时候我们再搓一个令牌桶">这时候我们再搓一个令牌桶</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBucket</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> qps;</span><br><span class="line">    <span class="keyword">private</span> LinkedBlockingDeque&lt;Date&gt; tokenBucket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initGenToken</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; qps; i++) &#123;</span><br><span class="line">            <span class="comment">//一开始先把桶装满</span></span><br><span class="line">            tokenBucket.offer(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//生成，令牌</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.MICROSECONDS.sleep(<span class="number">1000</span>/qps);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    tokenBucket.offer(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(run);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenBucket</span><span class="params">(<span class="type">int</span> qps,<span class="type">int</span> capacity)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.qps = qps;</span><br><span class="line">        <span class="built_in">this</span>.tokenBucket = <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(capacity);</span><br><span class="line">        initGenToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> tokenBucket.poll();</span><br><span class="line">        <span class="keyword">return</span> date != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TokenBucket</span> <span class="variable">tokenBucket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenBucket</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="keyword">if</span>(tokenBucket.tryAcquire())&#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; at &quot;</span>+now+<span class="string">&quot; get success&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(i+<span class="string">&quot; at &quot;</span>+now+<span class="string">&quot; get error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;total num:&quot;</span>+ count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消耗令牌的过程如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">1</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">2</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">3</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">4</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">5</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">6</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">7</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">8</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">9</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">10</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">11</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">12</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">13</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">14</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">15</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">16</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">17</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">18</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">19</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">20</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">21</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">22</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">23</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">24</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">25</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">26</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">27</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">28</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">29</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">30</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">31</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">32</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">33</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">34</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">35</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">36</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">37</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">38</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">39</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">40</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">41</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">42</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">43</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">44</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">45</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">46</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">47</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">48</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">49</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">50</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">51</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">52</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">53</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">54</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">55</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">56</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">57</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">58</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">59</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">60</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">61</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">62</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">63</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">64</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">65</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">66</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">67</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">68</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">69</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">70</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">71</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">72</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">73</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">74</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">75</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">76</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">77</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">78</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">79</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">80</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">81</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">82</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">83</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">84</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">85</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">86</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">87</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">88</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">89</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">90</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">91</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">92</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">93</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">94</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">95</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">96</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">97</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">98</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">99</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">100</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">101</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">102</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">103</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">104</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">105</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">106</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">107</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">108</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">109</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">110</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">111</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">112</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">113</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">114</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">115</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">116</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">117</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">118</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">119</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">120</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">121</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">122</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">123</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">124</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">125</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">126</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">127</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">128</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">129</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">130</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">131</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">132</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">133</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">134</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">135</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">136</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">137</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">138</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">139</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">140</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">141</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">142</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">143</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">144</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">145</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">146</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">147</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">148</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">149</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">150</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">151</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">152</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">153</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">154</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">155</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">156</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">157</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">158</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">159</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">160</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">161</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">162</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">163</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">164</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">165</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">166</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">167</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">168</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">169</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">170</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">171</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">172</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">173</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">174</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">175</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">176</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">177</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">178</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">179</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">180</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">181</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">182</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">183</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">184</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">185</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">186</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">187</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">188</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">189</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get success</span><br><span class="line"><span class="attribute">190</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">191</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">192</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">193</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">194</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">195</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">196</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">197</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">198</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">199</span> at Mon Apr <span class="number">07</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">10</span> CST <span class="number">2025</span> get error</span><br><span class="line"><span class="attribute">total</span> num:<span class="number">107</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试拾遗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 手撕 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Canal订阅binlog自动更新Redis</title>
      <link href="/posts/canal_binlog.html"/>
      <url>/posts/canal_binlog.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>这是我扩充我的项目的一个点，有点摸着石头过河的意思，可能很多思路也不够企业化，然后技术选型什么的也不够正确。</p><h1>背景介绍</h1><p>因为我的项目是一个IM聊天项目，所以前端发来消息带有Uid和联系人Id，这时候后端需要进行权限验证，判断是不是好友，不是好友禁止发消息，这种验证是频繁的，所以用户的联系人要放在缓存里。但是用户可能会频繁的添加删除好友，这时候就需要维护缓存和数据库的一致性。</p><p>我一开始是采用手动删除，延迟双删的思路，用户发第一条消息的时候就会出现明显的卡顿。所以其实应该在更新完联系人之后就把新的联系人信息放到缓存里。但是手工操作容易出错忽略在哪里没有删。</p><p>刚好看八股看到了这种思路，就是通过订阅binlog，根据消息队列的消息里找出哪个用户的联系人信息被修改了，就来更新对应用户的联系人信息的缓存。</p><p>所以就有了这篇博客。</p><h1>MySQL开启binlog并且设定为RAW模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like&#x27;%log_bin%&#x27;;</span><br><span class="line">+---------------------------------+-----------------------------+</span><br><span class="line">| Variable_name                   | Value                       |</span><br><span class="line">+---------------------------------+-----------------------------+</span><br><span class="line">| log_bin                         | ON                          |</span><br><span class="line">| log_bin_basename                | /var/lib/mysql/binlog       |</span><br><span class="line">| log_bin_index                   | /var/lib/mysql/binlog.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                         |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                         |</span><br><span class="line">| sql_log_bin                     | ON                          |</span><br><span class="line">+---------------------------------+-----------------------------+</span><br><span class="line">6 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><p>这里我简单看了一下我的库，不知道为什么是自己开启的，但是还是准备去配置文件看一眼是不是配置了server_id</p><p>这里进去</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/my</span>sql<span class="comment"># vi my.cnf</span></span><br></pre></td></tr></table></figure><p>加一下配置开启binlog就行了<br>令人烦躁时的我50块的京东云服务器的2G内存快要顶不住压力了：）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 开启 binlog</span></span><br><span class="line"><span class="attr">log-bin</span> = /var/log/mysql/mysql-bin.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 server-id（每个 MySQL 实例必须唯一）</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：设置 binlog 格式（ROW 是推荐的格式）</span></span><br><span class="line"><span class="attr">binlog_format</span> = ROW</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：设置 binlog 过期时间（单位为天）</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：限制 binlog 文件大小（单位为字节，默认值为 1GB）</span></span><br><span class="line"><span class="attr">max_binlog_size</span> = <span class="number">100</span>M</span><br></pre></td></tr></table></figure><h1>Canal下载并配置</h1><p>然后是下载Canal，技术选型方面，其实我能选择的不太多，主要就是Canal 和 Debezium。</p><p>我选择Canal的原因大抵如下：</p><p>轻量级：Canal专注于 MySQL 数据库的 CDC，架构相对简单，更加轻量化。</p><p>独立于 Kafka：不像 Debezium一样，最初专为Kafka设计。</p><p>易于部署：Canal 的部署相对简单，尤其是对单一数据库的监听、</p><p>下载然后一键tar-zxf之后进行一下简单的配置，在提供的样例里修改。</p><h2 id="修改conf-example-instance-properties">修改conf/example/instance.properties</h2><h2 id="mysql-serverId">mysql serverId</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canal.instance.mysql.slaveId</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">## 这个要和数据库的server-id不相同</span></span><br><span class="line"><span class="attr">canal.instance.master.address</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span> </span><br><span class="line"><span class="attr">canal.instance.dbUsername</span> = zhima  </span><br><span class="line"><span class="attr">canal.instance.dbPassword</span> = ********</span><br></pre></td></tr></table></figure><p>配置完之后可以自己先启动一下，就很简单，bash /bin/startup.sh</p><p>然后稍微修改一下数据库中的一行，之后看一下example输出的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2025-03-31 22:00:50.725 [destination = example , address = /127.0.0.1:3306 , EventParser] ERROR com.alibaba.otter.canal.common.alarm.LogAlarmHandler - destination:example[com.alibaba.otter.canal.parse.exception.CanalParseException: java.io.IOException: connect /127.0.0.1:3306 failure</span><br><span class="line">Caused by: java.io.IOException: connect /127.0.0.1:3306 failure</span><br><span class="line">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:85)</span><br><span class="line">    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlConnection.connect(MysqlConnection.java:104)</span><br><span class="line">    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser.preDump(MysqlEventParser.java:89)</span><br><span class="line">    at com.alibaba.otter.canal.parse.inbound.AbstractEventParser$1.run(AbstractEventParser.java:171)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:750)</span><br><span class="line">Caused by: java.io.IOException: Error When doing Client Authentication:ErrorPacket [errorNumber=1698, fieldCount=-1, message=Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;, sqlState=28000, sqlStateMarker=#]</span><br><span class="line">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.negotiate(MysqlConnector.java:325)</span><br><span class="line">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:81)</span><br><span class="line">    ... 4 more</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果像这样一般是配置有问题没连上，修改一下就行，之后成功连上之后就可以自己写一个客户端来进行调用啦，下面这段代码用来测试就很合适。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karlyn.dogie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCanalClientExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 连接信息配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;*.*.*.*&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">11111</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destination</span> <span class="operator">=</span> <span class="string">&quot;example&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建链接</span></span><br><span class="line">        <span class="type">CanalConnector</span> <span class="variable">connector</span> <span class="operator">=</span> CanalConnectors.newSingleConnector(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(hostname, port), destination, username, password</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;连接创立成功&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">&quot;.*\\..*&quot;</span>);</span><br><span class="line">            connector.rollback();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> connector.getWithoutAck(batchSize); <span class="comment">// 获取指定数量的数据</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">batchId</span> <span class="operator">=</span> message.getId();</span><br><span class="line">                <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> message.getEntries().size();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 没有拿到数据</span></span><br><span class="line">                <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;message[batchId=%s, size=%s] \n&quot;</span>, batchId, size);</span><br><span class="line">                    printEntry(message.getEntries());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                connector.ack(batchId); <span class="comment">// 提交确认</span></span><br><span class="line">                <span class="comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printEntry</span><span class="params">(List&lt;Entry&gt; entries)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;ERROR ## parser of eromanga-event has an error , data:&quot;</span> + entry.toString(),</span><br><span class="line">                        e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">EventType</span> <span class="variable">eventType</span> <span class="operator">=</span> rowChange.getEventType();</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span>,</span><br><span class="line">                    entry.getHeader().getLogfileName(),</span><br><span class="line">                    entry.getHeader().getLogfileOffset(),</span><br><span class="line">                    entry.getHeader().getSchemaName(),</span><br><span class="line">                    entry.getHeader().getTableName(),</span><br><span class="line">                    eventType));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数据变化</span></span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowChange.getRowDatasList()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    printColumn(rowData.getBeforeColumnsList());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    printColumn(rowData.getAfterColumnsList());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    printColumn(rowData.getAfterColumnsList());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printColumn</span><span class="params">(List&lt;Column&gt; columns)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Column column : columns) &#123;</span><br><span class="line">            System.out.println(column.getName() + <span class="string">&quot; : &quot;</span> + column.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后开始和消息队列和Springboot整合啦</p><h2 id="修改canal配置canal-properties">修改canal配置canal.properties</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">canal.serverMode = rabbitMQ</span><br><span class="line"></span><br><span class="line">##################################################</span><br><span class="line">#########           RabbitMQ         #############</span><br><span class="line">##################################################</span><br><span class="line">rabbitmq.host = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">rabbitmq.virtual.host = /</span><br><span class="line">rabbitmq.exchange = canal-exchange</span><br><span class="line">rabbitmq.username = root</span><br><span class="line">rabbitmq.password = <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>同时继续修改instance.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mq config</span></span><br><span class="line"><span class="comment"># canal.mq.topic=example</span></span><br><span class="line"><span class="attr">canal.mq.topic</span>=canal-routing-key</span><br><span class="line"><span class="comment">##为了过滤指定的表，我还加了如下限定</span></span><br><span class="line"><span class="attr">canal.instance.defaultDatabaseName</span>=dogie</span><br><span class="line"></span><br><span class="line"><span class="comment"># table regex</span></span><br><span class="line"><span class="attr">canal.instance.filter.regex</span>=dogie\\.user_contact</span><br></pre></td></tr></table></figure><p>然后重启canal服务</p><h1>Springboot集成</h1><p>消息订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karlyn.dogie.Canal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanalProvider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">canalQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * durable:是否持久化，默认false，持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在；暂存队列：当前连接有效</span></span><br><span class="line"><span class="comment">         * exclusive:默认为false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span></span><br><span class="line"><span class="comment">         * autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitConstant.CanalQueue, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机，这里使用直连交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">canalExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(RabbitConstant.CanalExchange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列，并设置匹配键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingCanal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(canalQueue()).to(canalExchange()).with(RabbitConstant.CanalRouting);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息消费，我这里写的比较简单，如果消息消费失败之后我会把它重新放回消息队列，但是这时候消息队列会一直把这个消息发给消费者，所以这块还需要优化一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.karlyn.dogie.Canal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.enums.UserContactStatusEnum;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.po.UserContact;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.query.UserContactQuery;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.mappers.UserContactMapper;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.redis.RedisComponent;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.util.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Canal消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = RabbitConstant.CanalQueue)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanalConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserContactMapper userContactMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisComponent redisComponent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CanalConsumer</span><span class="params">(UserContactMapper userContactMapper, RedisComponent redisComponent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userContactMapper = userContactMapper;</span><br><span class="line">        <span class="built_in">this</span>.redisComponent = redisComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Listener</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> tag)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到canal消息：&quot;</span> + message);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        Map&lt;String, Object&gt; msg = objectMapper.readValue(message,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDdl</span> <span class="operator">=</span> (<span class="type">boolean</span>) msg.get(<span class="string">&quot;isDdl&quot;</span>);</span><br><span class="line">        <span class="comment">// 不处理DDL事件</span></span><br><span class="line">        <span class="keyword">if</span> (isDdl) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">database</span> <span class="operator">=</span> (String) msg.get(<span class="string">&quot;database&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">table</span> <span class="operator">=</span> (String) msg.get(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> (String) msg.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">        List&lt;LinkedHashMap&gt; data = (List&lt;LinkedHashMap&gt;) msg.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(database.equals(<span class="string">&quot;dogie&quot;</span>)&amp;&amp;table.equals(<span class="string">&quot;user_contact&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (LinkedHashMap s : data) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">UserId</span> <span class="operator">=</span> (String) s.get(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line">                    log.info(<span class="string">&quot;更新&#123;&#125;的联系人缓存&quot;</span>,UserId);</span><br><span class="line">                    <span class="type">UserContactQuery</span> <span class="variable">userContactQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserContactQuery</span>();</span><br><span class="line">                    userContactQuery.setUserId(UserId);</span><br><span class="line">                    userContactQuery.setStatus(UserContactStatusEnum.FRIEND.getStatus());</span><br><span class="line">                    List&lt;UserContact&gt; userContactList = <span class="built_in">this</span>.userContactMapper.selectList(userContactQuery);</span><br><span class="line">                    List&lt;String&gt; contactIds = userContactList.stream().map(item-&gt;item.getContactId()).collect(Collectors.toList());</span><br><span class="line">                    <span class="built_in">this</span>.redisComponent.cleanUserContact(UserId);</span><br><span class="line">                    <span class="keyword">if</span>(!contactIds.isEmpty())&#123;</span><br><span class="line">                        <span class="built_in">this</span>.redisComponent.addUserContactBatch(UserId, contactIds);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(tag,<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                System.out.println(e.getMessage());</span><br><span class="line">                channel.basicNack(tag,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> Canal </tag>
            
            <tag> binlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于多线程的一些实验</title>
      <link href="/posts/thread.html"/>
      <url>/posts/thread.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>都是做的比较浅显的一些实验，很多问题来自于小林coding，很多内容其实挺八股的，但是我的记忆偶尔会带有一些内存特性，关机就忘了，所以现在想办法通过一点实验和手敲代码落一下盘。</p><h1>正式内容</h1><h2 id="线程">线程</h2><h3 id="进程和线程的区别">进程和线程的区别</h3><p>线程和进程的区别，这个问题在很多地方都会遇到，无论是在操作系统还是在Java多线程。</p><p>其实两者最大的区别就是是否享有独立的执行环境。</p><p>我们以Java举例，JVM的运行时内存主要包括这样五块：</p><ol><li>虚拟机栈</li><li>堆（常量池什么的其实也在堆里）</li><li>元空间</li><li>本地方法栈(Native)</li><li>程序计数器</li></ol><p>一个进程会独立的享有这全部的五个运行时环境，而线程则不是，一个进程创建一个线程，这个线程会获得自己独立的虚拟机栈、程序计数器，对于任意该进程创建的线程，其余三者都是共用的。</p><p>举个🌰：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepTry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">      <span class="comment">//这个StringBuilder是创建在进程堆上的，所以他是会被共享的，创建线程的时候会拷贝一个引用副本</span></span><br><span class="line">      <span class="comment">//所以任何线程都可以操作并修改他，修改的并不是线程自己创建的，而是进程所创建的</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; bq =<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1000L</span>, TimeUnit.SECONDS,bq);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (sb)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;I am Thread2\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Future&lt;?&gt; feature2 =  threadPoolExecutor.submit(task2);</span><br><span class="line">        feature2.get();</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        threadPoolExecutor.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，线程是操作系统运算调度的最小单位，因为线程之间的资源共享性质，导致它的上下文切换的开销更小。同时，他们可以通过访问全局变量或者静态变量来通信。</p><p>进程的创建和销毁需要创建和销毁上述的全部资源，而进程只需要创建和销毁程序计数器和对应的运行时栈即可。</p><h3 id="线程的创建">线程的创建</h3><p>很多面经喜欢把这个问题总结为四类，包括继承Thread、实现Runable和FutureTask、实现Callable、使用线程池，但其实归根到底来说还是三类，因为FutureTask这个抽象类实现了RunnableFuture接口，RunnableFuture这个接口继承了Future接口和Runable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Revision notes: This differs from previous versions of this</span></span><br><span class="line"><span class="comment">     * class that relied on AbstractQueuedSynchronizer, mainly to</span></span><br><span class="line"><span class="comment">     * avoid surprising users about retaining interrupt status during</span></span><br><span class="line"><span class="comment">     * cancellation races. Sync control in the current design relies</span></span><br><span class="line"><span class="comment">     * on a &quot;state&quot; field updated via CAS to track completion, along</span></span><br><span class="line"><span class="comment">     * with a simple Treiber stack to hold waiting threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">Runnable</span>, Future&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets this Future to the result of its computation</span></span><br><span class="line"><span class="comment">     * unless it has been cancelled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，创建线程有两件事情，1.确定线程要做的事情，也就是实现run或者call方法。2.启动线程</p><p>所以我们可以直接用一个类继承Thread然后重写run方法，就像这样！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello zhima.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Thread3</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread3</span>();</span><br><span class="line">thread3.start();</span><br></pre></td></tr></table></figure><p>或者就像上面那样实现Runable接口。</p><p>关于为什么要使用FutureTask这个抽象类，其实主要是希望获得线程的返回值。</p><p>就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread4</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">114514</span>,<span class="number">114515</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Thread4</span>());</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">t4.start();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">rand</span> <span class="operator">=</span> ft.get();</span><br><span class="line">System.out.println(rand);</span><br><span class="line"><span class="comment">//114514</span></span><br></pre></td></tr></table></figure><p>如果用线程池其实创建方法也很多，可以通过下面几种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建大小固定的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//也可以创建一个</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService1</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//也可以直接new一个ThreadPoolExecutor</span></span><br><span class="line"><span class="comment">//要指定的东西就比较多了，包括核心线程数，最大的线程数，非核心空闲线程AliveTime，AliveTime的单位，以及用来存储等待任务的阻塞队列</span></span><br><span class="line"><span class="comment">//如果阻塞队列用ArrayBlockingQueue的话还要指定最大大小</span></span><br><span class="line">BlockingQueue&lt;Runnable&gt; blockingQueue =<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executorService2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1000L</span>, TimeUnit.SECONDS,blockingQueue);</span><br></pre></td></tr></table></figure><p>还有八股里面常问的start和run的区别，run其实就是调用一下你定义的线程要执行的方法，而start才是启动线程。</p><p>线程的状态包括：new、runable、blocked、waiting、timed_waiting、terminated</p><h3 id="sleep和wait的区别">sleep和wait的区别</h3><p>这是我决定写这篇博客的出发点，主要是我一开始竟然不知道sleep不会释放当前占用的资源，就比如说我用synchronized关键字同步住了一个资源StringBuilder。</p><p>如果我在同步块内调用了一下sleep(0)，虽然线程会放弃对该时间片的占用，但是并不会释放资源。</p><p>但是如果在同步块内使用wait()，就会放弃对当前资源和时间片的占用。</p><p>做个简单的实验，就是最开始那部分的代码，我们先通过实验进行尝试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepTry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; bq =<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1000L</span>, TimeUnit.SECONDS,bq);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (sb)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.append(<span class="string">&quot;I am Thread1\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (sb)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;I am Thread2\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Future&lt;?&gt; feature1 =  threadPoolExecutor.submit(task1);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        Future&lt;?&gt; feature2 =  threadPoolExecutor.submit(task2);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        <span class="comment">//feature1.get();</span></span><br><span class="line">        <span class="comment">//feature2.get();</span></span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        threadPoolExecutor.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在同步块里sleep了2s，如果释放了资源，一定是够第二个线程把自己的内容加进去的。</p><p>为了让主进程等待两个线程都执行完，我加了一个两步计数器CountDownLatch，每个线程执行完就减一。用被注释掉的两行get其实也可以。</p><p>但是实际结果是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"><span class="selector-tag">I</span> am Thread1</span><br><span class="line"><span class="selector-tag">I</span> am Thread2</span><br></pre></td></tr></table></figure><p>显然，资源并没有得到释放</p><p>此时别的代码都不作修改，在两个线程的同步块内分别调用wait()和notifyAll()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepTry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; bq =<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1000L</span>, TimeUnit.SECONDS,bq);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (sb)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sb.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.append(<span class="string">&quot;I am Thread1\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (sb)&#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;I am Thread2\n&quot;</span>);</span><br><span class="line">                    sb.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Future&lt;?&gt; feature1 =  threadPoolExecutor.submit(task1);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        Future&lt;?&gt; feature2 =  threadPoolExecutor.submit(task2);</span><br><span class="line">        <span class="comment">//feature1.get();</span></span><br><span class="line">        <span class="comment">//feature2.get();</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        threadPoolExecutor.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"><span class="selector-tag">I</span> am Thread2</span><br><span class="line"><span class="selector-tag">I</span> am Thread1</span><br></pre></td></tr></table></figure><p>资源成功释放，第二个线程也成功写入。</p><p>如果第二个线程不notify，而主进程又等着线程1减少计数器，那么进程就会一直等待。</p><p>所以此时我们wait的时候可以加个timeout的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.wait(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>所以很多八股其实总结的并不好，wait并不一定需要notify才能唤醒，也可以主动设定timeout，超时也会唤醒。</p><h4 id="小小总结一下sleep和wait">小小总结一下sleep和wait</h4><ol><li><p>sleep方法属于Thread类，是一个静态方法，作用是让当前线程进入sleep状态；而wait是一个实例方法，属于Object类，必须被一个初始化了的实力对象调用</p></li><li><p>如果处于同步块内，sleep不会释放资源，但是wait会释放资源</p></li><li><p>sleep可以不在同步块内调用，但是wait一定要在同步块内调用。也就是说，你要释放这个资源，你必须持有这个资源的锁，否则就会报错如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.ExecutionException: java.lang.IllegalMonitorStateException: current thread is not owner</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:<span class="number">122</span>)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:<span class="number">191</span>)</span><br><span class="line">at SleepTry.main(SleepTry.java:<span class="number">44</span>)</span><br><span class="line">Caused by: java.lang.IllegalMonitorStateException: current thread is not owner</span><br><span class="line">at java.base/java.lang.Object.wait(Native Method)</span><br><span class="line">at java.base/java.lang.Object.wait(Object.java:<span class="number">338</span>)</span><br><span class="line">at SleepTry$<span class="number">1.</span>run(SleepTry.java:<span class="number">15</span>)</span><br><span class="line">at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">539</span>)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">264</span>)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1136</span>)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">635</span>)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:<span class="number">833</span>)</span><br></pre></td></tr></table></figure></li><li><p>唤醒机制，sleep只能等待超时唤醒，但是wait既可以超时唤醒，也可以通过被notify()或者notifyAll()唤醒</p></li></ol><p>最后这里补充一下notify和notifyAll的区别，这是小林coding上写的，说的特别形象</p><p>notify：唤起一个线程，其他线程还处于waiting状态，如果这个线程结束的时候没有notify，那么其他线程只能继续等待到超时或被中断。而且notify说是随机唤醒，但是在hotspot虚拟机里是先进先出的唤醒。</p><p>notifyAll：所有线程都被唤醒，然后进入资源争夺环节，喜闻乐见的BLOCKED状态</p><h3 id="线程状态">线程状态</h3><p>之前说了线程的六个状态，这里再提醒自己默写一下：</p><p>NEW、RUNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED</p><p>BLOCKED和WAITING其实还挺难分清楚的，我总结为下：</p><p>虽然都是阻塞在那里，但是BLOCKED是因为资源竞争导致的阻塞</p><p>WAITING是线程无限期地等待另一个线程执行特定操作，比如上面所使用的CountDownLatch，如果调用await()方法，其实是进入WAITING状态，和调用wait方法类似。</p><h3 id="线程停止">线程停止</h3><p>老生常谈，就是Java官方不建议使用Thread.stop()这种方式来停止。</p><p>有很多种方法包括</p><ol><li><p>使用volatile关键字来修饰一个boolean变量，线程关注到boolean变量自己内部停止</p></li><li><p>调用线程中断Thread.interrupt()，然后线程内部检测当前线程是否为中断状态或者触发可中断操作来响应中断。</p><p>可触发中断操作是指sleep或者wait等阻塞操作，如果这时候收到中断请求会直接抛中断异常的。</p></li><li><p>通过Future管理任务，Future接口是一个可以主动停止任务的接口，Future.cancel()</p></li><li><p>关闭资源</p></li></ol><h2 id="锁">锁</h2><h3 id="volatile关键字和synchronized关键字">volatile关键字和synchronized关键字</h3><p>这两个关键字总是被拿出来说，但其实两者的作用差距还是挺大的。</p><p>volatile的作用主要体现在禁止指令重排导致的修改不可见。</p><p>这个🌰其实挺不好举的，我试着看看能不能出现。失败了，很难复现啊，因为并不知道虚拟机底层是如何指令重排和优化的。</p><p>但是volatile关键字的目的所在，就是为了让线程知道一个变量它变化了，能感知到它的变化，借由此线程之间可以相互通信。</p><p>然后说说volatile关键字的作用域，volatile关键字主要作用于变量声明上，更多的用于<strong>实例变量</strong>或<strong>静态变量</strong>，所以局部变量声明无意义。</p><h3 id="synchronized关键字和-ReentrantLock">synchronized关键字和 ReentrantLock</h3><p>接下来就是synchronized关键字，其实它更应该和ReentrantLock放在一起比较才适合，所以我们把它挪到下面来</p><p>synchronized关键字主要用于声明同步，也就是给资源加锁。</p><p>与ReentrantLock相同的，synchronized也是一个可重入锁，也就是同一个线程内再次上锁也可以获得资源。</p><p>synchronized是Java提供的原子内置锁，也被称为监视器锁。</p><p>使用synchronize关键字修饰的代码块在编译的时候前后会分别加上monitorenter和monitorexit。</p><p>这个执行到monitorenter的时候会尝试获取资源，如果获取到资源就把计数器加一，执行到monitorexit的时候就把计数器减一。为0的时候代表是可获取的。</p><p>接下来是synchronized关键字的作用域，其实挺复杂的：</p><ol><li><p>作用于类的实例方法上，那就是锁住了当前实例，同一时间只能有一个线程访问该方法的任何 <code>synchronized</code> 实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">beBlocked</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getB</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">beBlocked</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">beBlocked</span>();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1000L</span>, TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;());</span><br><span class="line">        threadPoolExecutor.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        test.getA();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadPoolExecutor.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span>test.getB();</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以这段代码为例，调用getA方法sleep的那10s，另一个线程是没有办法获得到哪怕是getB方法的返回值的。</p></li><li><p>作用于静态方法，那就会锁住类对象，同一时间只能有一个线程访问该方法的任何 <code>synchronized</code> 静态方法。</p></li><li><p>作用于代码块，也就是常用的synchronized(){}范式，括号里可以为Object或者this，也可以是Class对象</p></li></ol><p>ReentrantLock相比于synchronized更为精细化。</p><p>它实现了两个接口，Lock接口和序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7373984872572414699L</span>;</span><br><span class="line">    <span class="comment">/** Synchronizer providing all implementation mechanics */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base of synchronization control for this lock. Subclassed</span></span><br><span class="line"><span class="comment">     * into fair and nonfair versions below. Uses AQS state to</span></span><br><span class="line"><span class="comment">     * represent the number of holds on the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5179523762034025860L</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同步的实现主要依赖于继承自AbstractQueuedSynchronizer类（AQS）类的Sync类</p><p>ReentrantLock是可重入锁，从名字就可以看出来，每次获取都需要相应的释放操作，锁内部维护了一个计数器来记录获取的次数。这点和synchronized关键字很像。</p><p>实例化ReentrantLock的时候可以选择是否启用公平锁。公平锁会按照请求顺序授予锁，而非公平锁则允许插队（即新来的线程可能在等待中的线程之前获得锁）。默认是非公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</span></span><br><span class="line"><span class="comment"> * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">    sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></span><br><span class="line"><span class="comment"> * given fairness policy.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时ReentrantLock支持中断响应，也就是在等待锁的时候在同步块内响应打断。</p><p>同时也支持非阻塞式的获取锁，tryLock，如果不能获得锁，立刻返回，也可以传入等待时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">reentrantLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line">reentrantLock.lockInterruptibly();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> reentrantLock.tryLock(<span class="number">10</span>, TimeUnit.MICROSECONDS);</span><br></pre></td></tr></table></figure><h3 id="其他的锁">其他的锁</h3><p>synchronized和ReentrantLock都是排他锁，其实还有很多其他锁的类型。</p><p>像是ReadWriteLock，写锁是独占锁，但是读锁是共享锁。</p><p>以及一些概念性的锁，乐观锁和悲观锁。</p><p>乐观锁其实本质上就是假设资源没人用，有人用了我再重来。悲观锁就是synchronized和ReentrantLock这样的锁，一定要独占了再去操作。</p><p>自旋锁主要是靠CAS实现的。CAS全称Compare And Set。</p><p>涉及三个参数：内存位置（V）、预期原值（A）和新值（B）。CAS 的执行逻辑如下：</p><ol><li>检查内存位置 V 中的值是否等于预期原值 A。</li><li>如果相等，则将内存位置 V 的值更新为新值 B，并返回成功。</li><li>如果不相等，说明有其他线程已经修改了该位置的值，则不进行任何操作，并返回失败。</li></ol><p>这其实是乐观锁的一种实现。Java的原子类比如AtomicInteger就提供这种类型的方法：compareAndSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically sets the value to &#123;<span class="doctag">@code</span> newValue&#125;</span></span><br><span class="line"><span class="comment"> * if the current value &#123;<span class="doctag">@code</span> == expectedValue&#125;,</span></span><br><span class="line"><span class="comment"> * with memory effects as specified by &#123;<span class="doctag">@link</span> VarHandle#compareAndSet&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expectedValue the expected value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class="line"><span class="comment"> * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> expectedValue, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> U.compareAndSetInt(<span class="built_in">this</span>, VALUE, expectedValue, newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sychronized">sychronized</h3><p>sychronized的锁升级过程：</p><p>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</p><p>偏向锁是JAVA1.6引入的，当一个线程拿到锁之后，会记录它的线程ID，如果没有竞争时，只需要比较记录的ID与自己是否一致，一致直接获得锁，不需要CAS操作。</p><p>当有锁竞争的时候，偏向锁升级为轻量级锁。这时候的锁通过CAS实现，允许自旋。</p><p>当竞争激烈的时候，轻量级锁升级为重量级锁，系统挂起线程而不是线程自旋。</p><h3 id="AQS">AQS</h3><p>全名为抽象同步队列，实现同步的重要底层之一。</p><p>主要维护一个阻塞队列和一个state。如果state为0或者为同线程（可重入锁），则可获得锁，计数器+1；</p><p>竞争失败的线程加入到阻塞队列中去，如果是公平锁，新来的线程直接加入到阻塞队列中去</p><h3 id="非公平锁为什么比公平锁吞吐量大">非公平锁为什么比公平锁吞吐量大</h3><p>因为非公平锁获取线程CAS如果获取到锁直接就拥有锁，不需要进行上下文切换。</p><h3 id="死锁条件">死锁条件</h3><ol><li>互斥条件</li><li>拥有并等待</li><li>不可剥夺</li><li>资源依赖环路</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量云服务器结合RabbitMQ实现调用本地AI接口</title>
      <link href="/posts/deepseek.html"/>
      <url>/posts/deepseek.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我有一个仿微信的IM聊天项目，但是想做出一点新的东西，AI这个风口上所以还是想看看能不能做点AI接口的调用。但是直接调用官方接口意义不大，其实本质上来说，本地用Ollama部署完然后本地调用本地接口其实也不算很有难度的事情。</p><p>但是恰好我的IM项目就有这么一点——需要支持跨服务器之间的消息发送，所以设计了一个发布订阅的中间件来进行服务器上某个节点的消息扩散到其他服务器上，这样就天然支持了一件事情，就是A服务器的任务，如果被B服务器处理了，依然可以发送回到A服务器。</p><h2 id="简单展示"><a href="#简单展示" class="headerlink" title="简单展示"></a>简单展示</h2><p>客户端发送消息给服务端，我的服务端是京东云的一个轻量级服务器，2G内存的那种。</p><p>现在我在客户端给服务端发一条消息，这时候我没关我本地的服务器啊，也就是说，我本地有个能处理AI图片的服务器挂在那里消费消息队列，这时候有正常的响应（别介意，不是32B，只是我当时觉得能跑，但是确实太慢了，后面我直接换1.5b了）</p><p><img src="/picture/ai_message.png" alt="客户端发消息"></p><p>这时候我们看看我京东云的日志，可以看到，有一条日志说消息队列消息增加，这是我在消息进入交换机的时候打的一个log，证明这条消息在不同服务器上扩散了，这时候就要去自己服务器上把这条消息发给对应的人，如果自己维护的WebSocketChannel里没有，就直接不管了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;$&#123;rabbit.queue.message&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Listener</span><span class="params">(String msg, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> tag)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">MessageSendDto</span> <span class="variable">sendDto</span> <span class="operator">=</span> JsonUtils.convertJson2Obj(msg, MessageSendDto.class);</span><br><span class="line">    log.info(<span class="string">&quot;消息队列收到消息&quot;</span>);</span><br><span class="line">    log.info(msg);</span><br><span class="line">    channelContextUtils.sendMessage(sendDto);</span><br><span class="line">    channel.basicAck(tag, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这条消息直接被丢弃了，但是因为是机器人，所以我们同时把它加到了机器人对应的消息队列里，但是我们京东云的日志并没有后续的处理。日志如下：</p><p><img src="/picture/jd_log.png" alt="京东云日志"></p><p>但是我们本地处理了，这是我本地运行jar包的输出</p><p><img src="/picture/local_log.png" alt="本地输出"></p><p>这是消息队列的消费情况。</p><p><img src="/picture/mq1.png" alt="消息队列"></p><p>这时候如果我们停掉本地的服务器，消息就会堆积在消息队列里等待有能力处理的服务器上线。</p><p><img src="/picture/mq2.png" alt="消息队列"></p><p>自然也不会给用户消息反馈。</p><p><img src="/picture/ai_message2.png" alt="客户端发消息"></p><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>为了后续扩展方便，以及为了跨服务器聊天就是用了RabbitMQ的fanout扇出交换机来进行服务器之间的消息扩散，所以这次AI接口的技术扩展我们继续使用RabbitMQ，但是与之前选择使用发布订阅模型不同，我们这次选择的模式是生产者-消费者模型，也就是工作队列模式。</p><h2 id="这里简单介绍一下RabbitMQ的五种模式吧"><a href="#这里简单介绍一下RabbitMQ的五种模式吧" class="headerlink" title="这里简单介绍一下RabbitMQ的五种模式吧"></a>这里简单介绍一下RabbitMQ的五种模式吧</h2><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><p>包含一个生产者，一个消费者，一个队列。生产者发送消息，消费者监听并消费消息。</p><p>这种模式的作用为：解耦，削峰填谷</p><p><img src="/picture/simple.png" alt="简单模式"></p><p>其实邮件、聊天都是这种场景的受众，只不过我们的服务器充当了一个消息队列的功能</p><h3 id="工作队列模式"><a href="#工作队列模式" class="headerlink" title="工作队列模式"></a>工作队列模式</h3><p>这种模式就是一个生产者，一个队列，多个消费者，生产者源源不断往队列里放任务，消费者监听并处理任务。这样的模式也被称为能者多劳模式，能力越强的消费者消费的消息更多。</p><p><img src="/picture/work.png" alt="工作队列"></p><p>但是需要说的是，Springboot集成RabbitMQ，默认限制限制消费者一次从队列里获取250条消息，也就是说，消费者会一次预支250条消息，能力差的消费者这250条消息可能会处理很久。这点在我们的任务中表现的极为明显。我有一个7650GRE的卡和一张4090的卡，同时用这两个本地机器消费消息，显然7650GRE的能力比不上4090，250条消息要处理很久才能结束，但是我们的项目是一个实时聊天项目，可能4090处理完250条消息之后又会接着获取新的消息，导致后来的消息比前来的消息更快被模型处理和响应。</p><p>所以这里我们限制了每个消费者一次只能获取一条消息，处理完之后才能继续获取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.listener.simple.prefetch=1</span><br></pre></td></tr></table></figure><p>这种模型最典型的应用场景就是抢红包，但是可能会出现红包余额被错误修改的情况，这种时候需要对红包余额加锁或者CAS操作。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>发布订阅模式与工作队列模式不同在于，一条消息可以被多个消费者消费，这种在RabbitMQ中的实现就是fanout交换机，fanout交换机将获得的消息扇出到bind到它上面的每个消息队列中，每个消息队列被一个消费者消费，这样即可构成发布订阅模式。</p><p><img src="/picture/sub.png" alt="发布订阅模式"></p><p>这种模式最为经典的类比就是广播消息。但是这种模式和后面的路由模式的差别就在于无法过滤消息，也就是说要扇出就会扇出到全部绑定的队列。</p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p><img src="/picture/router.png" alt="路由模式"></p><p>路由模式根据生产者提供的路由key将消息发送到绑定到交换机上且路由key符合的消息队列。</p><h3 id="Topic模式"><a href="#Topic模式" class="headerlink" title="Topic模式"></a>Topic模式</h3><p>主题模式，是由路由模式衍生出来的一种模式，路由模式并不支持模糊匹配，路由Key必须完全对应才会发送到对应的消息队列，但是主题模式不同，可以使用通配符匹配</p><p><img src="/picture/topic.png" alt="Topic模式"></p><ol><li><p>星号 和 井号代表通配符</p></li><li><p>星号匹配1个词, #匹配一个或多个词（* 匹配一级任意多个字符，# 匹配多级任意多个字符）</p></li></ol><p>​       例如：routingKey为”user.#”，表示可以匹配”user.add”和”user.add.log”。</p><p>​       routingKey为”user.*”，表示可以匹配”user.add”，对于”user.add.log”则无法匹配。</p><ol><li><p>路由功能添加模糊匹配</p></li><li><p>消息产生者产生消息,把消息交给交换机</p></li><li><p>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费 </p></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>到这里我们复习完了五种模式，我们选择了工作队列模式，同时限定消费者只能消费一个队列。</p><p>所以我们在具体实现中，判断用户发来的消息是否是发给指定的机器人ID的，在这里我们设定为URobot，如果是这个ID，那么我们就将用户的UID以及用户发送的信息先简单打个信息表，打完信息表之后直接将这个信息封装为一个消息Dto，序列化之后加入到消息队列中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Constants.ROBOT_UID.equals(contactId)) &#123;</span><br><span class="line">    <span class="type">SysSettingDto</span> <span class="variable">sysSettingDto</span> <span class="operator">=</span> redisComponet.getSysSetting();</span><br><span class="line">    <span class="type">TokenUserInfoDto</span> <span class="variable">robot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenUserInfoDto</span>();</span><br><span class="line">    robot.setUserId(sysSettingDto.getRobotUid());</span><br><span class="line">    robot.setNickName(sysSettingDto.getRobotNickName());</span><br><span class="line">    <span class="type">ChatMessage</span> <span class="variable">robotChatMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMessage</span>();</span><br><span class="line">    robotChatMessage.setContactId(sendUserId);</span><br><span class="line">    <span class="comment">//封装消息装到作为AI返回发送地址以及prompt准备加入到消息队列中去</span></span><br><span class="line">    robotChatMessage.setMessageType(MessageTypeEnum.CHAT.getType());</span><br><span class="line">    <span class="type">AIRabbitDto</span> <span class="variable">aIRabbitDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AIRabbitDto</span>();</span><br><span class="line">    aIRabbitDto.setChatMessage(robotChatMessage);</span><br><span class="line">    aIRabbitDto.setMessage(chatMessage.getMessageContent());</span><br><span class="line">    aIRabbitDto.setTokenUserInfoDto(robot);</span><br><span class="line">  <span class="comment">//将对应的消息投递到对应的消息队列中去</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;dogie.direct&quot;</span>,<span class="string">&quot;chat&quot;</span>,JsonUtils.convertObj2Json(aIRabbitDto));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  messageHandler.sendMessage(messageSend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们就需要设定对应的Listener了，这里我们存留了一点私心，就是我不希望用分离的方式来实现这个Listener，我最佳的愿望肯定是我有多个服务器，然后有的服务器有能力处理消息传递和AI功能，没有AI功能的服务器只负责对应的消息传递。所以我们给Listener的Bean使用了@ConditionalOnProperty注解，当服务器有能力处理AI对话的时候，就把配置文件中对应的字段设置为true，对应的服务器就会注册这个Listener的Bean，就会进一步调用listener方法，如果服务器没有能力，就不注册这个bean，自然也不会从消息队列里去取这个任务。</p><p>关于AI的调用，我看了挺多博客的，他们都说SpringAI可以继承了ollama的调用，我好像没找着，所以还是手搓了一个发消息的方法，就是使用OkHttpClient去调这个api，为了等待异步消息结束，我加了个CountDownLatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.karlyn.dogie.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.dto.AIRabbitDto;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.dto.OllamaResult;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.dto.TokenUserInfoDto;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.entity.po.ChatMessage;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.service.ChatMessageService;</span><br><span class="line"><span class="keyword">import</span> com.karlyn.dogie.util.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;rabbit.listener.ai.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AIListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatMessageService chatMessageService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ai.timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer timeout;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ai.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String URL_OLLAMA;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ai.model&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String MODEL_DEEPSEEK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AIListener</span><span class="params">(ChatMessageService chatMessageService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatMessageService = chatMessageService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;deepseek.queue&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Listener</span><span class="params">(String msg, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> tag)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">AIRabbitDto</span> <span class="variable">aIRabbitDto</span> <span class="operator">=</span> JsonUtils.convertJson2Obj(msg, AIRabbitDto.class);</span><br><span class="line">        log.info(<span class="string">&quot;消费消息&quot;</span>);</span><br><span class="line">        log.info(aIRabbitDto.toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        getAiResult4Deepseek(aIRabbitDto.getMessage(),</span><br><span class="line">        aIRabbitDto.getChatMessage(),</span><br><span class="line">                            aIRabbitDto.getTokenUserInfoDto());</span><br><span class="line">          <span class="comment">//如果消费成功了，就手动确认一下</span></span><br><span class="line">         channel.basicAck(tag, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果消费失败了就得Nack一下，把对应的消息重新塞回消息队列</span></span><br><span class="line">            channel.basicNack(tag, <span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getAiResult4Deepseek</span><span class="params">(String message, ChatMessage robotChatMessage, TokenUserInfoDto robot)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 设定头参数</span></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;prompt&quot;</span>, message);</span><br><span class="line">        params.put(<span class="string">&quot;model&quot;</span>, MODEL_DEEPSEEK);</span><br><span class="line">        params.put(<span class="string">&quot;stream&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        params.put(<span class="string">&quot;temperature&quot;</span>, <span class="number">0.7</span>);</span><br><span class="line">        params.put(<span class="string">&quot;top_p&quot;</span>, <span class="number">0.9</span>);</span><br><span class="line">        params.put(<span class="string">&quot;max_tokens&quot;</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> JsonUtils.convertObj2Json(params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Http请求</span></span><br><span class="line">        Request.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(URL_OLLAMA);</span><br><span class="line">        <span class="type">RequestBody</span> <span class="variable">body</span> <span class="operator">=</span> RequestBody.create(MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>), jsonParams);</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> builder.post(body).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置OkHttpClient</span></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">                .connectTimeout(timeout, TimeUnit.SECONDS)</span><br><span class="line">                .writeTimeout(timeout, TimeUnit.SECONDS)</span><br><span class="line">                .readTimeout(timeout, TimeUnit.SECONDS)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">eventLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);<span class="comment">//定义一个只有1的计数器</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">resultBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); <span class="comment">// 用来收集消息</span></span><br><span class="line"></span><br><span class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;请求失败&quot;</span>, e);</span><br><span class="line">                eventLatch.countDown(); <span class="comment">// 请求失败计数器也减一</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">ResponseBody</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (responseBody != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 读取响应内容</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">fullResponse</span> <span class="operator">=</span> responseBody.string();</span><br><span class="line">                          <span class="comment">//这里我是定义了一个对应的参数来解析这个responseBody</span></span><br><span class="line">                            <span class="type">OllamaResult</span> <span class="variable">aiResult</span> <span class="operator">=</span> JsonUtils.convertJson2Obj(fullResponse, OllamaResult.class);</span><br><span class="line">                            log.info(aiResult.getResponse());</span><br><span class="line">                            resultBuffer.append(aiResult.getResponse()); <span class="comment">//获取消息</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;获取失败&quot;</span>, response);</span><br><span class="line">                &#125;</span><br><span class="line">                eventLatch.countDown(); <span class="comment">// 请求成功计数器减一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        eventLatch.await(); <span class="comment">//等待计数器为0，也就是要么失败要么成功</span></span><br><span class="line">        String[] messages = resultBuilder.toString().split(<span class="string">&quot;&lt;/think&gt;\n\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(messages.length&lt;=<span class="number">1</span>) messages[<span class="number">0</span>]=<span class="string">&quot;服务器繁忙，请稍后再试&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果成功直接把消息封装到Message里去，然后就可以把它继续加到消息队列里面去，但是是用来跨服务器通信的消息队列</span></span><br><span class="line">      <span class="comment">//后面这个bean就是做这件事情的，写表然后加消息队列</span></span><br><span class="line">        robotChatMessage.setMessageContent(messages[messages.length - <span class="number">1</span>]);</span><br><span class="line">        chatMessageService.saveMessage(robotChatMessage, robot);</span><br><span class="line">        <span class="keyword">return</span> resultBuilder.toString(); <span class="comment">//这个返回其实没什么用，是我在测试的时候打印的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty相关的一些知识</title>
      <link href="/posts/netty_inform.html"/>
      <url>/posts/netty_inform.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>在3月20日的博客里，我通过代码来理解了一下NIO和BIO的区别，可以看出一部分代码是比较麻烦和复杂的，在项目开发中一般遇到这种普适性的问题，都会有前人造出轮子来让我们使用，而对于NIO的网络编程，最佳的轮子就是Netty。</p><p>Netty的语言实现是Java，所以去看源码什么的也会比较容易一点。</p><h1>Reactor设计模式</h1><p>Netty的核心在于异步、事件驱动。</p><p>在了解Netty之前必须先了解Reactor设计模式。</p><p>Reactor的翻译是反应堆，其实本质上就是事件驱动模式。</p><p>在Reactor模式中，有一些比较重要的概念：</p><ol><li>事件，Event，对应于Netty中的channelActive、channelRead、channelInactive等等</li><li>事件处理器，EventHandler，对应于Netty中的ChannelInboundHandler，对应的事件就要有对应的事件处理逻辑</li><li>Reactor，事件分发器，负责响应并分发I/O事件。事件发生了，需要将事件交给对应的事件处理器去处理，在Netty中，对应的工作由EventLoop来执行。</li><li>事件多路处理器，Selector，在上一篇博客里我们重点讨论过这个部分，在Netty中，Selector的工作由EventLoop来执行。</li></ol><p>Netty实现了Reactor的三种模型，分别为：</p><ol><li>单Reactor单线程模型，对应Netty中的单线程模型</li><li>单Reactor多线程模型，对应Netty中的多线程模型</li><li>主从Reactor多线程模型，对应Netty中的主从多线程模型</li></ol><h2 id="单线程模型">单线程模型</h2><p>我们在上一篇博客中实现的NIO模式，其实就是单Reactor单线程模式。</p><p>只启用一个Selector，这个Selector又要监听Accept事件，获得Channel之后将对应的Channel也注册到同一个Selector上去，这个Selector需要负责监听这个Channel的读写事件以及之前的ServerChannel的注册事件。</p><p><img src="/picture/single_reactor.png" alt="单Reactor"></p><p>这里我用了掘金的图，我觉得画的比较符合我的认知。</p><p>那么在我们上篇博客里，服务器的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// NIO基于Channel控制，所以有Selector管理所有的Channel</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置监听端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">// 设置Selector管理所有Channel</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">// 注册并设置连接时处理</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务启动成功，监听端口为：&quot;</span> + <span class="number">8080</span>);</span><br><span class="line">        <span class="comment">// NIO使用轮询，当有请求连接时，则启动一个线程</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">keySelect</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (serverSocketChannel.isOpen()) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (next.isAcceptable()) &#123;    <span class="comment">//  如果是连接的</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    <span class="keyword">if</span> (accept != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//把新的会话测channel注册到selector里去，让Selector来管理它</span></span><br><span class="line">                        accept.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">//并且把它的感兴趣状态变为可读状态</span></span><br><span class="line">                        accept.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息</span></span><br><span class="line">                <span class="keyword">if</span>(next.isReadable())&#123;</span><br><span class="line">                    handleRead(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。</span></span><br><span class="line">    <span class="comment">//但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">50</span>);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, read).trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端收到消息：&quot;</span>+msg);</span><br><span class="line">        <span class="type">String</span> <span class="variable">outMsg</span> <span class="operator">=</span> <span class="string">&quot;【Echo】&quot;</span> + msg; <span class="comment">// 生成回应信息</span></span><br><span class="line">        <span class="comment">//模拟消息处理时长</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        buffer.put(outMsg.getBytes());  <span class="comment">//回传信息放入缓冲区</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        channel.write(buffer);<span class="comment">// 回传信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果这段代码用Netty实现该如何实现呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">singleReactor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);<span class="comment">//限制为单线程</span></span><br><span class="line">        bootstrap.group(singleReactor)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">BossLogHandler</span>())</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ChannelPipeline</span> <span class="variable">channelPipeline</span> <span class="operator">=</span> channel.pipeline();</span><br><span class="line">                        <span class="comment">// 添加 HTTP 编解码器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpServerCodec</span>());</span><br><span class="line">                        <span class="comment">// 聚合 HTTP 消息</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(<span class="number">65536</span>));</span><br><span class="line">                        <span class="comment">// 处理 WebSocket 升级请求</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>(<span class="string">&quot;/ws&quot;</span>));</span><br><span class="line">                        <span class="comment">//超时处理器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">1000</span>, TimeUnit.SECONDS));</span><br><span class="line">                        <span class="comment">// 自定义处理器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">MyChannelHandler</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.bind(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>).sync();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 等待连接关闭</span></span><br><span class="line">        future.channel().closeFuture().sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个服务端实现起来是比较简单的，因为只有一个EventLoop，但其实多线程模式和主从模式其实也只需要稍作修改即可。</p><p>单线程模式的优势为：</p><ol><li>简化并发模型</li><li>减少上下文切换的开销</li><li>资源消耗低</li></ol><p>存在的问题：</p><p>阻塞模式、CPU利用率低、不适合高并发场景</p><h2 id="多线程模型">多线程模型</h2><p>和单线程模型不同的点在于多了一个handler线程池。</p><p>Reactor设计模式的单Reactor多线程模式和Netty的多线程模型其实并不完全对应。</p><p>Reactor的单Reactor多线程模式只有一个线程的问题，但是仍然只有一个Reactor在同时监听ACCEPT事件和READ事件。</p><p>但是Netty的多线程模式则并不是，所有线程都负责处理连接和数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EventLoopGroup</span> <span class="variable">singleReactor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br></pre></td></tr></table></figure><p>就把这个1去掉就行了。</p><p>多线程模型的优点包括：</p><ol><li>提高吞吐率</li><li>更好利用多核</li></ol><p>存在的问题：</p><ol><li>没有区分监听新连接和处理已有连接的读写操作，这种设计可能导致某些线程在处理复杂或耗时的数据处理任务时无法及时响应新的连接请求，从而影响新连接的接受速度。</li><li>难以实现有效的负载均衡，所有线程都在执行相似的任务，可能会出现部分线程过载而其他线程空闲的情况，难以实现真正的负载均衡。</li><li>资源竞争加剧，所有线程都可以访问I/O、数据库等共享资源</li></ol><p>为了解决这种问题Netty设计出了主从模型。</p><h2 id="主从模型">主从模型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);<span class="comment">//限制为单线程</span></span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);<span class="comment">//限制为单线程</span></span><br><span class="line">        bootstrap.group(boss,workers)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">BossLogHandler</span>())</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ChannelPipeline</span> <span class="variable">channelPipeline</span> <span class="operator">=</span> channel.pipeline();</span><br><span class="line">                        <span class="comment">// 添加 HTTP 编解码器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpServerCodec</span>());</span><br><span class="line">                        <span class="comment">// 聚合 HTTP 消息</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(<span class="number">65536</span>));</span><br><span class="line">                        <span class="comment">// 处理 WebSocket 升级请求</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">WebSocketServerProtocolHandler</span>(<span class="string">&quot;/ws&quot;</span>));</span><br><span class="line">                        <span class="comment">//超时处理器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">1000</span>, TimeUnit.SECONDS));</span><br><span class="line">                        <span class="comment">// 自定义处理器</span></span><br><span class="line">                        channelPipeline.addLast(<span class="keyword">new</span> <span class="title class_">MyChannelHandler</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.bind(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>).sync();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line">        <span class="comment">// 等待连接关闭</span></span><br><span class="line">        future.channel().closeFuture().sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将线程之间的任务分开，分为负责监听并建立新连接的boss线程池和负责处理已经连接的连接的事件的workers线程池，能够有效实现不同分工的负载均衡。</p><h1>EventLoop</h1><p>EvenLoop其实是Netty的核心所在，我们常常定义的EventLoopGroup是用来管理EventLoop实例线程池的。常见的实现包括NioEventLoopGroup和EpollEventLoopGroup。</p><h3 id="NioEventLoopGroup">NioEventLoopGroup</h3><ul><li><strong>基于Java NIO</strong>: NioEventLoopGroup 使用的是 Java 原生的非阻塞 I/O（NIO）API。这意味着它可以跨平台使用，无论是在 Windows、Linux 还是 macOS 上都能正常工作。</li><li><strong>跨平台兼容性</strong>: 由于依赖于标准的 Java NIO 库，因此具有很好的跨平台兼容性。</li><li><strong>性能特点</strong>: 对于大多数应用场景来说，NioEventLoopGroup 提供了足够的性能。然而，在高并发场景下，尤其是在 Linux 系统上，它可能不如 EpollEventLoopGroup 高效。</li></ul><h3 id="EpollEventLoopGroup">EpollEventLoopGroup</h3><ul><li><strong>基于Linux的epoll</strong>: EpollEventLoopGroup是专门为 Linux 系统设计的，它利用了 Linux 特有的 epoll I/O 事件通知机制。相比于 Java NIO 的 select/poll 方法，epoll 在处理大量文件描述符时更加高效，特别是在有大量连接但活跃连接相对较少的情况下。</li><li><strong>性能优化</strong>: 在高负载和高并发场景下，EpollEventLoopGroup 能够提供比 NioEventLoopGroup 更好的性能。这是因为 epoll 能够更有效地管理大量的文件描述符，并且在监听大量连接的同时保持较低的CPU使用率。</li><li><strong>限制</strong>: 只能在 Linux 系统上运行，因为它依赖于 Linux 内核特有的功能。</li></ul><p>就像我想在mac上运行就会报错，只在Linux上支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.UnsatisfiedLinkError: failed to load the required native library</span><br><span class="line">at io.netty.channel.epoll.Epoll.ensureAvailability(Epoll.java:81)</span><br><span class="line">at io.netty.channel.epoll.EpollEventLoopGroup.&lt;clinit&gt;(EpollEventLoopGroup.java:41)</span><br><span class="line">at NettyServer.main(NettyServer.java:16)</span><br><span class="line">Caused by: java.lang.ExceptionInInitializerError</span><br><span class="line">at io.netty.channel.epoll.Epoll.&lt;clinit&gt;(Epoll.java:40)</span><br><span class="line">... 2 more</span><br><span class="line">Caused by: java.lang.IllegalStateException: Only supported on Linux</span><br><span class="line">at io.netty.channel.epoll.Native.loadNativeLibrary(Native.java:317)</span><br><span class="line">at io.netty.channel.epoll.Native.&lt;clinit&gt;(Native.java:85)</span><br><span class="line">... 3 more</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Channel">Channel</h2><p>Channel其实就是类似于Socket的网络连接，可以是客户端连接或服务器监听端口。Channel负责读写网络数据，并注册到EventLoop中等待事件处理。</p><p>而Channel的I/O事件则会交给它的ChannelPipeline来处理，用户可以在ChannelPipeline添加一系列ChannelHandler，包括解码器、聚合器、WebSocketServerProtocolHandler这种http升级ws的Handler以及用户自定义的ChannelHandler（通过继承SimpleChannelInboundHandler或者ChannelInboundHandlerAdapter或者实现ChannelInboundHandler）来定义</p><h2 id="Netty事件驱动模型的工作原理">Netty事件驱动模型的工作原理</h2><p>Netty的事件驱动模型通过EventLoopGroup、EventLoop、Channel、ChannelPipeline和ChannelHandler之间的协同工作来实现。其工作流程如下：</p><ol><li>初始化：服务器启动时，创建一个或多个EventLoopGroup，分别用于接收连接和处理I/O操作。</li><li>注册Channel：为每个客户端连接创建一个Channel，并将其注册到一个EventLoop中。每个Channel会绑定一个ChannelPipeline。</li><li>事件循环：EventLoop在其绑定的线程中不断循环，监听I/O事件。当有事件发生时，EventLoop会将事件分发到ChannelPipeline。</li><li>事件处理：ChannelPipeline根据事件类型，将事件传递给相应的ChannelHandler进行处理。ChannelHandler可以处理入站、出站事件，或者进行数据编码、解码等操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵汇总</title>
      <link href="/posts/spiral-matrix.html"/>
      <url>/posts/spiral-matrix.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>其实螺旋矩阵类的题目按理来说应该是简单的，因为是纯粹的模拟，只不大家定义方向的方式各有不同，以及方向的转换以及判断不够灵活，所以我们就简单试试！</p><h1>螺旋矩阵</h1><p><a href="https://leetcode.cn/problems/spiral-matrix/">LeetCode原题链接</a></p><h2 id="题目描述">题目描述</h2><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例1</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="示例1"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[4,5,6]</span>,<span class="comment">[7,8,9]</span>]</span></span><br><span class="line">输出：<span class="comment">[1,2,3,6,9,8,7,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="示例2"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1,2,3,4</span>],[<span class="number">5,6,7,8</span>],[<span class="number">9,10,11,12</span>]]</span><br><span class="line">输出：[<span class="number">1,2,3,4</span>,<span class="number">8,12,11,10</span>,<span class="number">9,5,6,7</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10</code></li><li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li></ul><h2 id="解读">解读</h2><p>其实这是很经典的顺时针螺旋矩阵了，只需要定义好方向，判断好数组边界以及已访问边界，就可以很顺利解决了。所以接下来我们简单看看实现。</p><p>最重要的事情其实是定义好方向，然后根据方向进行走步。</p><p>学会优雅的第一步，就是勇敢的派出一个探子，让它去尝试，如果它失败了我们就换方向走一步，否则就原方向走一步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> m= matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序</span></span><br><span class="line">        <span class="type">int</span>[][] direction = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="type">int</span> dir_key=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; n * m; c++)&#123;</span><br><span class="line">            res.add(matrix[i][j]);</span><br><span class="line">            <span class="comment">//因为有范围为-100，100，标记已经访问过就可以用101</span></span><br><span class="line">            matrix[i][j]=<span class="number">101</span>;</span><br><span class="line">            <span class="comment">//别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i_try</span> <span class="operator">=</span> i + direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j_try</span> <span class="operator">=</span> j + direction[dir_key][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i_try&lt;<span class="number">0</span> || i_try&gt;=n || j_try&lt;<span class="number">0</span> || j_try&gt;=m || matrix[i_try][j_try]&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                dir_key = (dir_key+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i+direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            j = j+direction[dir_key][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>螺旋矩阵II</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">LeetCode原题链接</a></p><h2 id="题目描述-2">题目描述</h2><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="示例1"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="string">[[1,2,3],[8,9,4],[7,6,5]]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="string">[[1]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><h2 id="解读-2">解读</h2><p>其实本质上和上题是同样的思路，只不过一个是写入，一个是读取，不多赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span>[][] way = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> c=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">way_key</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line">            res[c][l]=i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + way[way_key][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextl</span> <span class="operator">=</span> l + way[way_key][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span> || nextc &gt;= n || nextl &lt; <span class="number">0</span> || nextl &gt;= n || res[nextc][nextl] != <span class="number">0</span>) &#123;</span><br><span class="line">                way_key = (way_key + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c = c+way[way_key][<span class="number">0</span>];</span><br><span class="line">            l = l+way[way_key][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>螺旋矩阵III</h1><p>这题还有有一点令人难受的，因为需要剪枝才能让效率稍微好一些，但是我剪的也不是非常好</p><p><a href="https://leetcode.cn/problems/spiral-matrix-iii/">LeetCode原题链接</a></p><h2 id="题目描述-3">题目描述</h2><p>在 <code>rows x cols</code> 的网格上，你从单元格 <code>(rStart, cStart)</code> 面朝东面开始。网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。</p><p>你需要以顺时针按螺旋状行走，访问此网格中的每个位置。每当移动到网格的边界之外时，需要继续在网格之外行走（但稍后可能会返回到网格边界）。</p><p>最终，我们到过网格的所有 <code>rows x cols</code> 个空间。</p><p>按照访问顺序返回表示网格位置的坐标列表。</p><p><strong>示例 1：</strong></p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png" alt="示例1"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rows = 1, cols = 4, rStart = 0, cStart = 0</span><br><span class="line">输出：<span class="comment">[<span class="comment">[0,0]</span>,<span class="comment">[0,1]</span>,<span class="comment">[0,2]</span>,<span class="comment">[0,3]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png" alt="示例2"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rows = 5, cols = 6, rStart = 1, cStart = 4</span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,4]</span>,<span class="comment">[1,5]</span>,<span class="comment">[2,5]</span>,<span class="comment">[2,4]</span>,<span class="comment">[2,3]</span>,<span class="comment">[1,3]</span>,<span class="comment">[0,3]</span>,<span class="comment">[0,4]</span>,<span class="comment">[0,5]</span>,<span class="comment">[3,5]</span>,<span class="comment">[3,4]</span>,<span class="comment">[3,3]</span>,<span class="comment">[3,2]</span>,<span class="comment">[2,2]</span>,<span class="comment">[1,2]</span>,<span class="comment">[0,2]</span>,<span class="comment">[4,5]</span>,<span class="comment">[4,4]</span>,<span class="comment">[4,3]</span>,<span class="comment">[4,2]</span>,<span class="comment">[4,1]</span>,<span class="comment">[3,1]</span>,<span class="comment">[2,1]</span>,<span class="comment">[1,1]</span>,<span class="comment">[0,1]</span>,<span class="comment">[4,0]</span>,<span class="comment">[3,0]</span>,<span class="comment">[2,0]</span>,<span class="comment">[1,0]</span>,<span class="comment">[0,0]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= rows, cols &lt;= 100</code></li><li><code>0 &lt;= rStart &lt; rows</code></li><li><code>0 &lt;= cStart &lt; cols</code></li></ul><h2 id="解读-3">解读</h2><p>其实还是老模板，只不过这次不会碰壁，是由内而外，所以需要自己判断螺旋什么时候需要走多少步。</p><p>其实我们可以发现，只要方向由上下变为左右的时候，就需要把螺旋的边长增加1，这点需要自己品味，为什么我设置的初始方向是向上，初始step是0，其实都是有一点意思的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] spiralMatrixIII(<span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">int</span> rStart, <span class="type">int</span> cStart) &#123;</span><br><span class="line">        <span class="type">int</span> r_n=rStart;</span><br><span class="line">        <span class="type">int</span> c_n=cStart;</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] direction = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dir_key</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[][] res=<span class="keyword">new</span> <span class="title class_">int</span>[rows*cols][<span class="number">2</span>];</span><br><span class="line">        res[<span class="number">0</span>][<span class="number">0</span>]=r_n;</span><br><span class="line">        res[<span class="number">0</span>][<span class="number">1</span>]=c_n;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;rows*cols)&#123;</span><br><span class="line">          <span class="comment">//方向转换</span></span><br><span class="line">            <span class="keyword">if</span>(dir_key%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                step+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dir_key = (dir_key+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">          <span class="comment">//剪枝，如果方向错了，就不用一步一步走了，反正都不会加进去，直接一步走到底</span></span><br><span class="line">            <span class="keyword">if</span>((r_n&lt;<span class="number">0</span>&amp;&amp;direction[dir_key][<span class="number">0</span>]&lt;=<span class="number">0</span>)||</span><br><span class="line">                (c_n&lt;<span class="number">0</span>&amp;&amp;direction[dir_key][<span class="number">1</span>]&lt;=<span class="number">0</span>)||</span><br><span class="line">                (r_n&gt;=rows&amp;&amp;direction[dir_key][<span class="number">0</span>]&gt;=<span class="number">0</span>)||</span><br><span class="line">                (c_n&gt;=cols&amp;&amp;direction[dir_key][<span class="number">1</span>]&gt;=<span class="number">0</span>))&#123;</span><br><span class="line">                r_n=r_n+direction[dir_key][<span class="number">0</span>]*step;</span><br><span class="line">                c_n=c_n+direction[dir_key][<span class="number">1</span>]*step;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 走步</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;step;i++)&#123;</span><br><span class="line">                r_n=r_n+direction[dir_key][<span class="number">0</span>];</span><br><span class="line">                c_n=c_n+direction[dir_key][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(r_n&gt;=<span class="number">0</span>&amp;&amp;r_n&lt;rows&amp;&amp;c_n&gt;=<span class="number">0</span>&amp;&amp;c_n&lt;cols)&#123;</span><br><span class="line">                    res[count][<span class="number">0</span>]=r_n;</span><br><span class="line">                    res[count][<span class="number">1</span>]=c_n;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>螺旋矩阵IV</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-iv/">LeetCode原题链接</a></p><h2 id="题目描述-4">题目描述</h2><p>给你两个整数：<code>m</code> 和 <code>n</code> ，表示矩阵的维数。</p><p>另给你一个整数链表的头节点 <code>head</code> 。</p><p>请你生成一个大小为 <code>m x n</code> 的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵 <strong>左上角</strong> 开始、<strong>顺时针</strong> 按 <strong>螺旋</strong> 顺序填充。如果还存在剩余的空格，则用 <code>-1</code> 填充。</p><p>返回生成的矩阵。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">5</span>, head = [<span class="number">3,0,2,6</span>,<span class="number">8,1,7,9</span>,<span class="number">4,2,5,5</span>,<span class="number">0</span>]</span><br><span class="line">输出：[[<span class="number">3,0,2,6</span>,<span class="number">8</span>],[<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>],[<span class="number">5,2,4,9</span>,<span class="number">7</span>]]</span><br><span class="line">解释：上图展示了链表中的整数在矩阵中是如何排布的。</span><br><span class="line">注意，矩阵中剩下的空格用 -<span class="number">1</span> 填充。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">1</span>, n = <span class="number">4</span>, head = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="string">[[0,1,2,-1]]</span></span><br><span class="line">解释：上图展示了链表中的整数在矩阵中是如何从左到右排布的。 </span><br><span class="line">注意，矩阵中剩下的空格用 <span class="number">-1</span> 填充。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 105</code></li><li><code>1 &lt;= m * n &lt;= 105</code></li><li>链表中节点数目在范围 <code>[1, m * n]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="解读-4">解读</h2><p>这题不多说啊，直接照搬II的代码就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] spiralMatrix(<span class="type">int</span> m, <span class="type">int</span> n, ListNode head) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            Arrays.fill(res[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序</span></span><br><span class="line">        <span class="type">int</span>[][] direction = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="type">int</span> dir_key=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        ListNode pre=head;</span><br><span class="line">        <span class="keyword">while</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            res[i][j] = pre.val;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">            <span class="comment">//别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i_try</span> <span class="operator">=</span> i + direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j_try</span> <span class="operator">=</span> j + direction[dir_key][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i_try&lt;<span class="number">0</span> || i_try&gt;=m || j_try&lt;<span class="number">0</span> || j_try&gt;=n || res[i_try][j_try]!=-<span class="number">1</span>)&#123;</span><br><span class="line">                dir_key = (dir_key+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i+direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            j = j+direction[dir_key][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于边界处理">关于边界处理</h2><p>其实I和IV都取巧了，就是在判断有没有达到边界的时候，用了数值的范围。</p><p>所以其实墙壁也需要交给我们管理的，所以对于IV的代码，我们也可以这么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] spiralMatrix(<span class="type">int</span> m, <span class="type">int</span> n, ListNode head) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            Arrays.fill(res[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序</span></span><br><span class="line">        <span class="type">int</span>[][] direction = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="type">int</span> dir_key=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        ListNode pre=head;</span><br><span class="line">      <span class="comment">//初始化边界</span></span><br><span class="line">        <span class="type">int</span> top=<span class="number">0</span>,left=<span class="number">0</span>,bottom=m-<span class="number">1</span>,right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            res[i][j] = pre.val;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">            <span class="comment">//别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i_try</span> <span class="operator">=</span> i + direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j_try</span> <span class="operator">=</span> j + direction[dir_key][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i_try&lt;top || i_try&gt;bottom || j_try&lt;left || j_try&gt;right)&#123;</span><br><span class="line">                <span class="comment">//碰壁就缩小墙壁</span></span><br><span class="line">                dir_key = (dir_key+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span>(dir_key==<span class="number">0</span>) left+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(dir_key==<span class="number">1</span>) top+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(dir_key==<span class="number">2</span>) right-=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(dir_key==<span class="number">3</span>) bottom-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i+direction[dir_key][<span class="number">0</span>];</span><br><span class="line">            j = j+direction[dir_key][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hot100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO模式详解</title>
      <link href="/posts/io_introduce.html"/>
      <url>/posts/io_introduce.html</url>
      
        <content type="html"><![CDATA[<p><s>我看了B站一堆教程，很少有能把IO多路复用讲明白的，所以我试一试看看能不能讲明白吧。</s></p><p>误！其实还是有的，我这里直接挂个链接！</p><p><a href="https://www.bilibili.com/video/BV1gozdYSEkR">BIO、NIO、IO多路复用</a></p><h1>BIO</h1><p>BIO的概念是同步阻塞IO，两个关键词，同步，阻塞。</p><p>同步在这里主要是看有消息返回之后，是否需要原线程继续处理。</p><p>阻塞是指一个线程在等待某个操作完成时暂停其执行的状态。</p><p>我们以Socket通信的方式来实现这些BIO，以一方请求另一方为例子。</p><p>我们先设计一个Socket的服务端，客户端每次发来消息就让线程休息5s，来模拟执行耗时，5s后给客户端发送一条消息。</p><p>当前我们设计一个客户端，一共进行四次输入，第一次客户端输入不阻塞等带服务器的返回。</p><p>服务端代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BIOServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//定义服务器的接收端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Server started on port &quot;</span>+<span class="number">8080</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();<span class="comment">//阻塞等待客户端连接</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">BioHandler</span>(socket)).start(); <span class="comment">// 为每个客户端连接启动新线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BioHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BioHandler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="built_in">this</span>.socket.getInputStream()));</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="built_in">this</span>.socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                String inputLine;</span><br><span class="line">                <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123; <span class="comment">// 阻塞等待输入</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;Received: &quot;</span> + inputLine);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                    <span class="comment">//sleep5s，模拟处理时间</span></span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    out.println(<span class="string">&quot;Echo: &quot;</span> + inputLine); <span class="comment">// 回显消息</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端不阻塞等待返回如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BIOClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">8080</span>);</span><br><span class="line">        <span class="comment">//定义发送流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//定义接受流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        System.out.println(<span class="string">&quot;Connected to server. Type messages and press enter.&quot;</span>);</span><br><span class="line">        String userInput;</span><br><span class="line">        <span class="comment">//我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">            userInput = <span class="string">&quot;mess&quot;</span>+i;</span><br><span class="line">            out.println(userInput); <span class="comment">// 发送到服务器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;消息:\&quot;&quot;</span>+userInput+<span class="string">&quot;\&quot;已经成功发送，当前时间是&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());<span class="comment">//描述成功发送到服务器</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们看客户端和服务器端分别的时间</p><p>客户端</p><p><img src="/picture/bio_c_nBlock.png" alt="BIO非阻塞客户端"></p><p>服务端</p><p><img src="/picture/bio_s_nBlock.png" alt="BIO非阻塞服务端"></p><p>可以看出，非阻塞的客户端是能直接把全部的消息发给服务器端的，只不过服务器端是一个一个处理的</p><p>那如果我们的客户端阻塞等待服务器端的返回呢？</p><p>只需要在客户端里加上一行代码就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BIOClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">8080</span>);</span><br><span class="line">        <span class="comment">//定义发送流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//定义接受流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        System.out.println(<span class="string">&quot;Connected to server. Type messages and press enter.&quot;</span>);</span><br><span class="line">        String userInput;</span><br><span class="line">        <span class="comment">//我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">            userInput = <span class="string">&quot;mess&quot;</span>+i;</span><br><span class="line">            out.println(userInput); <span class="comment">// 发送到服务器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;消息:\&quot;&quot;</span>+userInput+<span class="string">&quot;\&quot;已经成功发送，当前时间是&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());<span class="comment">//描述成功发送到服务器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;echo: &quot;</span> + in.readLine()); <span class="comment">// 阻塞等待服务器返回消息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这时候客户端的发送的方式是什么呢？</p><p><img src="/picture/bio_c_Block.png" alt="BIO阻塞客户端"></p><p>从结果我们发现，客户端阻塞在这里，等待服务器消费完一条消息才能执行自己接下来要做的事情，如果这时候客户端不是要给服务器发送消息，而是做其他的事情，是不是这些等待时间就是不必要的，完全可以去做其他的事情。</p><p>那么这时候，我们是不是能有这样一种方法，我们不在这里等着服务器处理完，我可以先去做其他的事情，然后时不时看服务器有没有处理完，处理完了我再获取这个数据呢。这时候NIO就应运而生了。</p><h1>NIO</h1><p>NIO的概念是同步非阻塞IO，也就是说我不用阻塞在这里等待对方执行完毕。而是我传递完消息之后就去做我自己的事情，时不时的通过Selector来看一看它是不是有返回值，也就是ReadAble状态。</p><p>所以接下来我们就通过Java来简单实现一下客户端和服务端。</p><p>首先介绍一下Selector，它提供了一种机制来管理多个通道（Channel）的I/O操作。通过使用selector，可以利用一个线程来监视多个通道上的事件（如连接请求、数据到达等），从而实现高效的服务端应用设计，尤其是在处理大量并发连接时。</p><p>我们先来改造客户端吧，改造比较容易，首先是消息就不通过PrintWriter发送了，因为他们属于不同的I/O模型，我们这次就得使用ByteBuffer来存我们的输入数据，然后让Channel去write。</p><p>同时呢，我们需要把Channel注册到Selector上去，让Selector来为我们轮询Channel的状态，当然也未必是轮询，后面我们讲到I/O多路复用的时候会说到。虽然这部分的代码内容稍多一些，但是我的注释写的还是比较翔实的。</p><p>比较有趣的是，这个客户端的实现没有考虑到粘包问题，刚好让我碰到了我以前比较好奇为什么会出现的粘包问题，这部分我们会逐渐优化给大家看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentLinkedQueue&lt;String&gt; messageQueue = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">clientChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        clientChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        clientChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">//将Channel注册到selector中去，并且设置该通道关注可连接事件</span></span><br><span class="line">        clientChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">        <span class="comment">//当channel没被关的时候一直循环</span></span><br><span class="line">        <span class="keyword">while</span> (clientChannel.isOpen()) &#123;</span><br><span class="line">            <span class="comment">//这段代码还是会阻塞当前线程，直到有注册到selector的通道准备好了进行某项操作</span></span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">//一旦 select() 方法返回，通过调用 selectedKeys() 方法来获取一个包含所有已准备好进行操作的通道的 SelectionKey 集合。</span></span><br><span class="line">            <span class="comment">// 每个 SelectionKey 都代表了一个与特定通道和操作相关的键。</span></span><br><span class="line">            <span class="comment">// 这些键包含了关于哪些通道准备好进行哪种类型的操作的信息（例如可读、可写等）。</span></span><br><span class="line">            <span class="comment">// 其实这里包含了多路复用的实现，因为获得了准备好的所有channel的信息，而不是一个channel准备好了就切换回用户态</span></span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iter = keys.iterator();</span><br><span class="line">            <span class="comment">//然后对所有准备好的通道依次处理</span></span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                iter.remove();</span><br><span class="line">                <span class="comment">//在第一次channel可用时候，其实只会触发这个isConnectable()，因为我们只注册该通道为可连接的</span></span><br><span class="line">                <span class="comment">//这时候就会调用我们定义好的连接handler</span></span><br><span class="line">                <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">                    handleConnect(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//在之后我们关注了可写事件，如果这个通道可写了，selector返回的key里就会设置为可写的</span></span><br><span class="line">                <span class="comment">//这时候就会调用我们定义好的writeHandler</span></span><br><span class="line">                <span class="comment">//可写其实是频繁触发的</span></span><br><span class="line">                <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                    handleWrite(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这时候如果服务器返回消息了，就会触发可读事件，selector返回的key里就会设置为可读的</span></span><br><span class="line">                <span class="comment">//这时候就调用我们定义好的readHandler</span></span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    handleRead(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clientChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key selector的包含channel信息以及其对应类型的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleConnect</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//从key里获取channel</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="comment">//如果连接完毕，就要把channel的关注切换为关注可写事件</span></span><br><span class="line">        <span class="keyword">if</span> (channel.finishConnect()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接建立成功，开始发送数据...&quot;</span>);</span><br><span class="line">            key.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">            <span class="comment">//当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的</span></span><br><span class="line">            <span class="comment">//key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span></span><br><span class="line">            <span class="comment">//连接成功之后我们往消息队列里加点数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                messageQueue.add(<span class="string">&quot;mess&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleWrite</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="comment">//触发可写事件的时候，我们从消息队列里挑选一条消息发过去</span></span><br><span class="line">        <span class="comment">//所以我们可能会触发粘包事件</span></span><br><span class="line">        <span class="keyword">if</span> (!messageQueue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;触发可写事件且有消息要发！&quot;</span>);</span><br><span class="line">            <span class="comment">//分配写入字节流</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">50</span>);</span><br><span class="line">            <span class="comment">//从消息队列获取消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> messageQueue.peek();</span><br><span class="line">            <span class="comment">//重置缓冲区，将限制设置为50，并将位置重置为0</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">            buffer.put(msg.getBytes());</span><br><span class="line">            <span class="comment">//将缓冲区从写模式切换到读模式。</span></span><br><span class="line">            <span class="comment">//它通过设置限制（limit）为当前位置，并将位置（position）重置为0。</span></span><br><span class="line">            <span class="comment">//这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//向channel写入数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesWritten</span> <span class="operator">=</span> channel.write(buffer);</span><br><span class="line">            <span class="comment">//如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息</span></span><br><span class="line">            <span class="keyword">if</span> (bytesWritten == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//如果全部写入成功，就会把消息删除，并且打印已发送</span></span><br><span class="line">            <span class="keyword">if</span> (!buffer.hasRemaining()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sentMsg</span> <span class="operator">=</span> messageQueue.poll();</span><br><span class="line">                System.out.println(<span class="string">&quot;消息:\&quot;&quot;</span> + sentMsg + <span class="string">&quot;\&quot;已发送，时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换关注读事件，但保持写事件关注</span></span><br><span class="line">        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">50</span>);</span><br><span class="line">        <span class="type">int</span> bytesRead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = channel.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//同样是把buffer设置为读状态</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//读取响应消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;收到响应：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, bytesRead)+<span class="string">&quot; ,当前时间是:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为了验证读消息之后还能触发写事件，我们每次读完往messageQueue里加2条消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> count; i &lt; count+<span class="number">2</span>; i++) &#123;</span><br><span class="line">            messageQueue.add(<span class="string">&quot;mess&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        count+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好，设计完客户端之后，就是设计服务端了，与之前BIO处理多个连接的方式不同，我们服务端这次不使用多线程来管理多个连接，而是直接使用Selector来管理多个Channel，ServerSocketChannel和SocketChannel一视同仁，都交给一个Selector管理。</p><p>让我们端上来吧！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// NIO基于Channel控制，所以有Selector管理所有的Channel</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置监听端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">// 设置Selector管理所有Channel</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">// 注册并设置连接时处理</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务启动成功，监听端口为：&quot;</span> + <span class="number">8080</span>);</span><br><span class="line">        <span class="comment">// NIO使用轮询，当有请求连接时，则启动一个线程</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">keySelect</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (serverSocketChannel.isOpen()) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (next.isAcceptable()) &#123;    <span class="comment">//  如果是连接的</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    <span class="keyword">if</span> (accept != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//把新的会话测channel注册到selector里去，让Selector来管理它</span></span><br><span class="line">                        accept.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">//并且把它的感兴趣状态变为可读状态</span></span><br><span class="line">                        accept.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息</span></span><br><span class="line">                <span class="keyword">if</span>(next.isReadable())&#123;</span><br><span class="line">                    handleRead(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。</span></span><br><span class="line">    <span class="comment">//但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">50</span>);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, read).trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端收到消息：&quot;</span>+msg);</span><br><span class="line">        <span class="type">String</span> <span class="variable">outMsg</span> <span class="operator">=</span> <span class="string">&quot;【Echo】&quot;</span> + msg; <span class="comment">// 生成回应信息</span></span><br><span class="line">        <span class="comment">//模拟消息处理时长</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        buffer.put(outMsg.getBytes());  <span class="comment">//回传信息放入缓冲区</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        channel.write(buffer);<span class="comment">// 回传信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器的实现我们写的时候还是阻塞的，但是其实写可用触发频率是很高的，所以我们就不把这个阻塞考虑进去了。</p><p>这时候我们起一个服务端，一个客户端看看情况如何！</p><p><img src="/picture/nio_single.png" alt="NIO单客户端"></p><p>是不是出现了粘包问题！在服务器处理mess0（也就是sleep 5s的时候），后面的mess1、mess2、mess3、mess4都到了，但是我们没有使用头部或者区分符号来进行区分，导致出现了粘包问题。</p><p>但是恰恰是这个粘包，也进一步佐证了我们实现了NIO，因为粘包是NIO的常见问题之一。</p><p>那是否我们的服务器在不使用多线程的情况下，不阻塞的同时响应两个客户端呢，我们来试一下就行哩！</p><p><img src="/picture/nio_two.png" alt="NIO多客户端"></p><p>由此可见，是可以的！只不过单线程响应就要做好逐个处理的缓慢准备。</p><h2 id="如何解决粘包问题">如何解决粘包问题</h2><p>其实解决粘包问题很简单，就是设计一个自己通用的协议，比如说设定一个自己通用的终止符号或者设计一个定长的头，用这个头来规定长度。</p><p>我们就选择后者实现。</p><p>下面是服务端的代码，这部分注释就少很多了，主要还是看handleRead部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// NIO基于Channel控制，所以有Selector管理所有的Channel</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置监听端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">// 设置Selector管理所有Channel</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">// 注册并设置连接时处理</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务启动成功，监听端口为：&quot;</span> + <span class="number">8080</span>);</span><br><span class="line">        <span class="comment">// NIO使用轮询，当有请求连接时，则启动一个线程</span></span><br><span class="line">        <span class="keyword">while</span> (serverSocketChannel.isOpen()) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="keyword">if</span> (next.isAcceptable()) &#123;    <span class="comment">//  如果是连接的</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    <span class="keyword">if</span> (accept != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//把新的会话测channel注册到selector里去，让Selector来管理它</span></span><br><span class="line">                        accept.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">//并且把它的感兴趣状态变为可读状态</span></span><br><span class="line">                        accept.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息</span></span><br><span class="line">                <span class="keyword">if</span>(next.isReadable())&#123;</span><br><span class="line">                    handleRead(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedLength</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">        <span class="keyword">if</span>(read ==-<span class="number">1</span> ) <span class="keyword">return</span>;</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="keyword">while</span> (buffer.remaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (expectedLength == -<span class="number">1</span>) &#123; <span class="comment">// 等待读取长度头</span></span><br><span class="line">                <span class="keyword">if</span> (buffer.remaining() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">                    expectedLength = buffer.getInt(); <span class="comment">// 读取4字节长度头</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 长度头未接收完整</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (buffer.remaining() &gt;= expectedLength) &#123;</span><br><span class="line">                <span class="type">byte</span>[] bodyBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[expectedLength];</span><br><span class="line">                buffer.get(bodyBytes);</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bodyBytes);</span><br><span class="line">                System.out.println(<span class="string">&quot;服务端收到消息：&quot;</span>+message);</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;【Echo】&quot;</span> + message;</span><br><span class="line">                <span class="comment">// 模拟处理延迟</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="type">byte</span>[] responseBytes = response.getBytes();</span><br><span class="line">                <span class="comment">// 构造响应：4字节长度头 + 消息体</span></span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">responseBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">4</span> + responseBytes.length);</span><br><span class="line">                responseBuffer.putInt(responseBytes.length);</span><br><span class="line">                responseBuffer.put(responseBytes);</span><br><span class="line">                responseBuffer.flip();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送响应</span></span><br><span class="line">                <span class="keyword">while</span> (responseBuffer.hasRemaining()) &#123;</span><br><span class="line">                    channel.write(responseBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">                expectedLength = -<span class="number">1</span>; <span class="comment">// 重置等待下一个消息</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//消息体未接收完整</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.compact(); <span class="comment">// 压缩缓冲区，保留未处理数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端部分的代码修改为下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOClient</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentLinkedQueue&lt;String&gt; messageQueue = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">clientChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        clientChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        clientChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        clientChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!messageQueue.isEmpty() || clientChannel.isOpen()) &#123;</span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iter = keys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">                iter.remove();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">                    handleConnect(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                    handleWrite(key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    handleRead(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clientChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key selector的包含channel信息以及其对应类型的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleConnect</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//从key里获取channel</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="comment">//如果连接完毕，就要把channel的关注切换为关注可写事件</span></span><br><span class="line">        <span class="keyword">if</span> (channel.finishConnect()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接建立成功，开始发送数据...&quot;</span>);</span><br><span class="line">            key.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">            <span class="comment">//当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的</span></span><br><span class="line">            <span class="comment">//key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span></span><br><span class="line">            <span class="comment">//连接成功之后我们往消息队列里加点数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                messageQueue.add(<span class="string">&quot;mess&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleWrite</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="comment">//触发可写事件的时候，我们从消息队列里挑选一条消息发过去</span></span><br><span class="line">        <span class="comment">//所以我们可能会触发粘包事件</span></span><br><span class="line">        <span class="keyword">if</span> (!messageQueue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;触发可写事件且有消息要发！&quot;</span>);</span><br><span class="line">            <span class="comment">//分配写入字节流</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">//从消息队列获取消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> messageQueue.peek();</span><br><span class="line">            <span class="type">byte</span>[] msgBytes = msg.getBytes();</span><br><span class="line">            <span class="comment">//数据总长为4+真实数据，4是一个int，用来存储数据长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">totalLength</span> <span class="operator">=</span> <span class="number">4</span> + msgBytes.length; <span class="comment">// 头部4字节 + 消息体</span></span><br><span class="line">            <span class="comment">//重置缓冲区，将限制设置为500，并将位置重置为0</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">            buffer.putInt(msgBytes.length); <span class="comment">// 写入4字节长度头（大端序）</span></span><br><span class="line">            buffer.put(msgBytes);           <span class="comment">// 写入消息体</span></span><br><span class="line">            <span class="comment">//将缓冲区从写模式切换到读模式。</span></span><br><span class="line">            <span class="comment">//它通过设置限制（limit）为当前位置，并将位置（position）重置为0。</span></span><br><span class="line">            <span class="comment">//这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//向channel写入数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesWritten</span> <span class="operator">=</span> channel.write(buffer);</span><br><span class="line">            <span class="comment">//如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息</span></span><br><span class="line">            <span class="keyword">if</span> (bytesWritten == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//如果全部写入成功，就会把消息删除，并且打印已发送</span></span><br><span class="line">            <span class="keyword">if</span> (!buffer.hasRemaining()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sentMsg</span> <span class="operator">=</span> messageQueue.poll();</span><br><span class="line">                System.out.println(<span class="string">&quot;消息:\&quot;&quot;</span> + sentMsg + <span class="string">&quot;\&quot;已发送，时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        readBuffer.clear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> channel.read(readBuffer);</span><br><span class="line">        <span class="keyword">if</span> (bytesRead == -<span class="number">1</span>) &#123;</span><br><span class="line">            channel.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer.flip();</span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedLength</span> <span class="operator">=</span>-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (readBuffer.remaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (expectedLength == -<span class="number">1</span>) &#123; <span class="comment">// 等待读取长度头</span></span><br><span class="line">                <span class="keyword">if</span> (readBuffer.remaining() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">                    expectedLength = readBuffer.getInt(); <span class="comment">// 读取4字节长度头</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 长度头未接收完整</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (readBuffer.remaining() &gt;= expectedLength) &#123;</span><br><span class="line">                <span class="type">byte</span>[] bodyBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[expectedLength];</span><br><span class="line">                readBuffer.get(bodyBytes);</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bodyBytes);</span><br><span class="line">                System.out.println(<span class="string">&quot;收到响应：&quot;</span> + response + <span class="string">&quot;，时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                expectedLength = -<span class="number">1</span>; <span class="comment">// 重置等待下一个消息</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 消息体未接收完整,继续回去候着</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer.compact(); <span class="comment">// 压缩缓冲区，保留未处理数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的结果如下：</p><p><img src="/picture/nianbao.png" alt="解决NIO粘包问题"></p><p>可以发现，成功解决哩！</p><p>那么接下来，我们就可以转战I/O多路复用了。</p><h1>I/O多路复用</h1><p>其实，在实现之前的NIO的时候，我们已经有用到I/O多路复用了，还记得我们使用了Selector吗，我们把所有的SocketChannel注册到一个Selector上，Selector帮我们判断他们是否能够满足我们关注的事件，如果能满足我们关注的事件，就触发对应的事件关注模式。</p><p>那这时候大家有没有一个疑惑呢？为什么调用<code> Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</code>这段代码，返回的结果是一个集合呢？它监视了select管理的全部channel的状态，这就是IO多路复用的体现！由此，我们在实现NIO的服务器的时候并没有在程序里显示创建额外的子线程来响应，而是创建了一个文件描述符channel，并把它交给selector管理！客户端其实是不需要IO多路复用的，因为客户端只设置了一个Channel。</p><p>想象一下，如果没有IO多路复用，这段代码的逻辑是什么呢？</p><p>我们还是更加具体的讲一下Selector的工作流程吧</p><ol><li><strong>注册通道与兴趣操作</strong>：首先，通过调用<code>SelectableChannel.register(Selector sel, int ops)</code>方法将一个或多个通道注册到选择器上，并指定对该通道感兴趣的I/O操作类型（如<code>OP_READ</code>, <code>OP_WRITE</code>, <code>OP_CONNECT</code>, 或 <code>OP_ACCEPT</code>）。这一步骤主要是在用户态完成的。</li><li><strong>轮询请求</strong>：当调用<code>selector.select()</code>或者其变种时，Java程序会进入等待状态，也就是触发一个打断，由用户态切换到内核态，直到至少有一个已注册的通道准备好执行至少一个你感兴趣的操作。在这个过程中，Java运行时环境会发起系统调用（例如，在Unix/Linux系统上的<code>epoll_wait</code>或在Windows上的<code>WSAWaitForMultipleEvents</code>），这些系统调用实际上会使控制权转移到操作系统内核。</li><li><strong>内核态处理</strong>：一旦控制权转移到内核，操作系统会监视所有被注册的通道，检查它们是否满足任何已注册的兴趣条件。这一过程高效地利用了操作系统提供的事件通知机制，比如Linux上的<code>epoll</code>、BSD系统上的<code>kqueue</code>或Windows上的I/O完成端口(IOCP)等。如果某个或某些通道的状态发生了变化（例如，新的数据到达使得读操作变为可能），内核就会识别出这些事件。</li><li><strong>返回用户态并更新就绪状态</strong>：当有通道变得“就绪”时，操作系统会返回相应的信息给Java的NIO层，然后从<code>select()</code>方法返回，允许Java程序继续执行。此时，你可以通过<code>selectedKeys()</code>方法获取所有已经准备好的通道对应的<code>SelectionKey</code>对象集合，并对这些通道进行相应的I/O操作。</li></ol><p>如果没有IO多路复用呢？是不是处理就不一样了呢？需要手动的遍历每个文件描述符，也就是我们要手动遍历每一个Channel，然后去内核态判断他们是不是可接受、可连接、可读、可写的，然后再回到用户态来进行对应的操作。似乎这样是可行的？</p><p>但是需要注意一点，这样又一个很明显的问题，就是频繁的进行了用户态和内核态的切换，这种切换是需要额外耗时的。</p><p>那么除此之外，其实还有一些其他的问题：</p><ol><li>每个连接都需要一个独立的线程或进程：在这种情况下，为了处理多个并发连接，常见的做法是为每个连接分配一个独立的线程或进程。这个线程或进程将负责执行读写操作，直到该连接关闭。这导致了所谓的“一连接一线程”模型。</li><li>缺乏高效的事件通知机制：在没有IO多路复用（如select、poll、epoll等）的情况下，程序员需要手动检查每个文件描述符的状态，或者依赖于每个线程/进程阻塞在一个特定的文件描述符上等待数据的到来。这种方式无法高效地管理和监控大量文件描述符。</li><li>资源消耗大且扩展性差：由于每个连接都需要一个独立的线程或进程，随着连接数的增加，系统资源（如内存和CPU时间）会被迅速耗尽。此外，大量的上下文切换也会降低系统的整体性能，使得这种方法难以扩展到支持数千甚至数万个并发连接。</li></ol><p>所以这时候我们就可以理解什么是IO多路复用了，简单来说就是：允许单个线程同时监视多个文件描述符。那么具体是怎么实现的，就是下面要讨论的内容了。分为：select、poll、epoll三种。其实到后面已经有点脱离Java的范畴了，所以在这里提前说一下。Java的Selector的select方法是灵活的，主要还是根据系统不同来实现的，如果在Linux内核上，会默认使用epoll来实现，如果epoll有些特性无法满足则会使用poll。在Windows内核上就需要使用select来实现。</p><h2 id="Select">Select</h2><p>Select模型的实现是基于轮询的，也就是每一次都把文件描述符的bitmap从用户态拷贝到内核态。这个bitmap最大大小为1024，所以select模型的一个selector最多只能监管1024个channel</p><p>用户态的bitmap存储了哪些文件描述符需要被监视，如果需要被监视，bitmap对应位置置为1。</p><p>内核态遍历为1的bitmap，如果文件描述符已经就绪，那就将对应位置置为1，否则为0，然后将bitmap返回给用户态</p><p>主要流程如下：</p><ul><li>将当前进程的所有文件描述符，一次性的从用户态拷贝到内核态；</li><li>在内核中快速的无差别遍历每个fd，判断是否有数据到达；</li><li>将所有fd状态，从内核态拷贝到用户态，并返回已就绪fd的个数；</li><li>在用户态遍历判断具体哪个fd已就绪，然后进行相应的事件处理。</li></ul><p>缺点是很明显的：</p><ol><li>能管理的文件描述符有限，最多为1024</li><li>每次都需要将文件描述符的bitmap从用户态拷贝到内核态，再从内核态拷贝到用户态</li><li>内核态返回bitmap之后，用户态仍然需要遍历才能知道哪个文件描述符就绪了</li></ol><p>一共有三个bitmap，分别对应了readfds、writefds、errorfds。主要检查三个对应的项目。</p><p>读缓冲区（readfds）：检测里边有没有数据，如果有数据该缓冲区对应的文件描述符就绪<br>写缓冲区（writefds）：检测写缓冲区是否可以写(有没有容量)，如果有容量可以写，缓冲区对应的文件描述符就绪<br>读写异常（errorfds）：检测读写缓冲区是否有异常，如果有该缓冲区对应的文件描述符就绪</p><h2 id="Poll">Poll</h2><p>Poll模型其实和Select模型是比较类似的，也是需要轮询的。</p><p>区别在于：</p><p>select使用位图来标记想关注的文件描述符，使用三个位图来标记想关注的读事件，写事件，错误事件。</p><p>poll使用一个结构体pollfd数组来标志想关注的文件描述符和在这个描述符上感兴趣的事件，poll的优点是数组的长度突破了1024的限制，其他的区别不大。</p><p>select可以跨平台，但是poll只支持Linux使用</p><p>两者同样都需要进行多次内核态和用户态的拷贝</p><h2 id="EPoll">EPoll</h2><p>其实epoll才是最难理解的部分，但是也是对前两者设计了优化，解决了文件描述符限制和多次内核态和用户态拷贝导致的性能开销问题。</p><p>Epoll其实基于一个比较重要的模型，就是事件驱动模型，使用了回调机制。</p><p>Select模型和Poll模型每次都需要遍历全部的文件描述符来检查它是否就绪，而epoll不同，它允许用户在注册时指定感兴趣的事件，这样在事件发生时，内核只需要更新它的内部数据结构，而不是每次都遍历全部的文件描述符。</p><h3 id="执行原理">执行原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num_size = <span class="number">5</span>;<span class="comment">//epoll监听的文件描述符的个数，其实在linux2.6.8的时候就取消这个限制了，这个数字的存在只是为了兼容</span></span><br><span class="line"><span class="type">int</span> epoll_fd = poll_create(num_size);<span class="comment">//创建一个epoll模型，其实也是一个文件描述符</span></span><br><span class="line"><span class="comment">//然后会创建一个内部数据结构，重点是两个部分，一个是红黑树的根，另一个是rd_list，也就是已就绪的双端队列</span></span><br><span class="line"><span class="comment">//假设这个时候有5个客户端连接到了服务端，epoll就会调用五次event_ctl，会在红黑树上创建5个节点，使用的方法是ADD，如果已经建立完成客户端，就要使用MOD修改监听的事件为读事件</span></span><br><span class="line"><span class="comment">//event_ctl方法需要传入的包括红黑树的根也就是even模型，需要操作的文件描述符，对这个文件描述符的操作，需要监视文件描述符事件集合</span></span><br><span class="line"><span class="comment">//event_ctl方法向内存注册fd和事件的时候，注册了一个回调函数，当操作系统将数据拷贝到缓冲区后，就会执行回调函数</span></span><br><span class="line"><span class="comment">//创建完成之后，如果有三个客户端向服务端的网卡发送数据，网卡会用DMA-Copy技术将数据拷贝到内存缓冲区，执行回调函数，这时候会将缓冲区的内容和文件描述符加入到rd_list，其实没有做拷贝操作，只是做了指针的连接操作</span></span><br><span class="line"><span class="comment">//这时候如果服务端调用epoll_wait方法，就会判断哪些文件描述符上的哪些事件已经就绪了，也就是把rd_link的内容拷贝到返回数组中，然后返回内核态</span></span><br></pre></td></tr></table></figure><h3 id="为什么会快">为什么会快</h3><p>只有被调用epoll_wait方法的时候，epoll才会进行一次内核态到用户态的拷贝，所以上下文切换较少。</p><p>epoll返回的事件只有就绪的事件，不需要遍历比较。</p><p>而且epoll是通过回调的方式来将就绪的事件加入到就绪队列中。</p><h1>总结</h1><p>至此，IO系列基本就分析完了，如果有问题欢迎各种平台交流。</p>]]></content>
      
      
      <categories>
          
          <category> 小实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BGP整理</title>
      <link href="/posts/bgp_introduce.html"/>
      <url>/posts/bgp_introduce.html</url>
      
        <content type="html"><![CDATA[<h1>BGP整理</h1><p>主还是整理一下BGP相关的内容，毕竟有一段在BGP的实习，防止自己逐渐忘记。</p><h2 id="简单介绍">简单介绍</h2><p>BGP也是路由协议之一，主要用在AS间交换路由信息（eBGP），当然也可以用在AS内交换路由信息（iBGP）。</p><p>与其他路由协议利于ISIS、OSPF等建立在IP协议上，RIP建立在UDP上不同，BGP建立在<strong>TCP</strong>连接之上，默认端口号是<strong>179号端口</strong>，所以我们这里有个观念，就是BGP其实是一个应用层的协议，即使它是一个路由协议。</p><p>BGP既然建立在TCP连接之上，就要求BGP对等体之间有稳定的路由链路连接，并不要求对等体之间直接连接。所以BGP所在AS内需要通过ISIS、OSPF、RIP等建立起连接，而通过BGP和其他自治系统通信。</p><p>BGP是基于路径向量的，这既不同于距离向量，也不同于链路状态。BGP所要传递的信息不仅包含到达目的地的最佳路径，还会携带所经过的全部自治系统的AS号，避免路由环路。</p><p>同时，BGP设定了很多属性和策略，可以根据他们来决策不同的最佳路径，包括：本地优先级、多出口区分符(MED)，权重等等。</p><h3 id="常见问题">常见问题</h3><ol><li><p>为什么其他路由不适合做域间路由？</p><p>a. 路由规模问题，IGP主要关注较小的网络环境，没有为处理大量路由信息而优化</p><p>b. 策略控制方面，常见的IGP协议没有提供BGP所提供的诸多策略控制属性，不能对流量进行细粒度控制</p><p>c. 防环方面，一些常用的IGP防环策略（1.最大跳数限制，2.水平分割（接口a收到的路由不会再从接口a广播出去），3.毒性逆转（路由失效的时候并不是直接删除，而是告知邻居自己与其距离无穷大））在跨AS其实并不能很好的使用</p></li><li><p>聊到了IGP的防环策略，那就聊一下BGP的防环策略吧</p><p>a. AS路径过滤，就是当收到的路由更新中包含自己的AS号，就忽略这条路由</p><p>b. IBGP水平分割，iBGP不会把自己从其他iBGP邻居学到的路由转发给另一个iBGP邻居，但是可以转发给他的eBGP邻居</p><p>c. 路由反射器，路由反射器允许一些路由器作为反射器，可以将从一个iBGP邻居学到的路由反射给其他iBGP邻居，解决了需要全连接iBGP才能防环的问题。路由反射器RR会接受与其建立iBGP连接(客户端)以及其他IGP连接(非客户端)的路由器的消息，从从客户端学到的路由反射给客户端和非客户端，从非客户端学到的路由仅反射给客户端。</p><p>路由反射器会在路由更新中添加Originator_ID，记录原始路由器ID，当再次收到相同Originator_ID的路由更新的时候忽略。</p><p>同时如果存在多个路由反射器，每个路由反射器会在Cluster_List里添加自己的Cluster_ID，如果发现自己的ID，就证明集群内循环，直接丢弃</p><p>d. BGP联邦。也就是在AS内划分多个BGP联邦，每个联邦自治，可以使用联邦AS号来避免环路</p></li><li><p>BGP和ISIS的区别</p><p>a. 一个是EGP，一个是IGP</p><p>b. 运行层次，一个运行在TCP的179端口上，一个运行在IP协议之上</p><p>c. 采用的路由算法不同，一个是使用路径向量算法，一个是使用链路状态算法</p><p>d. 适用规模不同，BGP适用于大规模组网，ISIS适合中大企业内部组网</p><p>e. 策略控制力度不同，BGP支持更加细粒度的策略控制</p></li><li><p>BGP和其他协议怎么互相学习</p><p>BGP有IGP路由引入</p></li></ol><h2 id="BGP的属性">BGP的属性</h2><ol><li><p>Origin，路由来源，是通过什么协议学到的，比如IGP，EGP，还是重分布</p></li><li><p>AS_PATH，途经的全部AS号，主要用于防环和根据路径长度选路</p></li><li><p>Next_Hop，下一跳，iBGP一般不会修改下一跳，eBGP会把下一跳修改为本地路由器的接口地址</p></li><li><p>MED，多出口鉴别器，主要是影响其他自治系统如何选择进入本自治系统的路径，较低值优先。仅在两个相邻的AS之内生效。</p></li><li><p>Local_Pref，本地优先级，主要是用于选择怎么离开该自治系统，同样是较低值优先。</p></li><li><p>Community，主要用于路由分组</p></li><li><p>Weight，某些BGP实现商的特有属性，主要用于最佳路径选择</p></li></ol><h3 id="常见问题-2">常见问题</h3><ol><li><p>说到BGP，了解运营商的单线或多线处理吗</p><p>主要是一个网络的ISP接入情况，单线指的是一个网络只使用一条线路或一个ISP截图，简单直接，但是会出现单点故障问题。</p><p>多线处理也被称为BGP多宿主，指的是通过多个ISP接入互联网哪过，通过BGP来管理优化这些连接。</p><p>多个ISP每个需要有独立的AS号，每个ISP之间需要建立eBGP对等体关系，配置出口策略和入口策略等。</p></li></ol><h2 id="BGP邻居建立过程">BGP邻居建立过程</h2><p>输入peer ip as_num as_num指令后一般会接受这些</p><ol><li>建立TCP连接，首先要在两个路由器的179端口号上建立TCP连接，建立成功之后可以初始化BGP对话</li><li>交换Open消息，主要包括双方的AS号，保持时间，BGP标识符（通常是IP地址）</li><li>参数协商，主要是判断Open消息的参数是否正确，正确就进入Established状态</li><li>Established状态要定期发送Keepalive消息来保活</li><li>然后就可以发送Update消息了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目介绍 </tag>
            
            <tag> 实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目介绍</title>
      <link href="/posts/project_introduce.html"/>
      <url>/posts/project_introduce.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e0eddff50479bfc04ea4a68fe6a2a731f852ab7ef6024f2927f15e8b8d0c4a83"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目介绍 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K个一组翻转链表</title>
      <link href="/posts/reverse-nodes-in-k-group.html"/>
      <url>/posts/reverse-nodes-in-k-group.html</url>
      
        <content type="html"><![CDATA[<h1>K个一组翻转链表</h1><p><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/description/?envType=study-plan-v2&amp;envId=top-100-liked">LeetCode原题链接</a></p><h2 id="题目描述">题目描述</h2><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例1</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" alt="示例1"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="string">[2,1,4,3,5]</span></span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" alt="示例2"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="string">[3,2,1,4,5]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数目为 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p>**进阶：**你可以设计一个只用 <code>O(1)</code> 额外内存空间的算法解决此问题吗？</p><h2 id="题目分析">题目分析</h2><p>这题难度被划归为困难，其实显然是不能达到困难题的难度的，只不过如果不习惯封装编程，单独将反转链表的方法单独写的话可能会有一些边界类型的问题出现。不过提到了需要使用 <code>O(1)</code> 额外内存空间，前置题目为反转链表，题目链接为：<a href="https://leetcode.cn/problems/reverse-linked-list/description/?envType=study-plan-v2&amp;envId=top-100-liked">反转链表</a>，只不过反转链表提到可以使用递归或者迭代的方式，但是递归的方式显然需要使用系统栈，无法实现额外内存空间需求，所以这题几乎已经锁定使用迭代的方式进行反转。</p><p>首先我们先尝试做一下反转链表这道题目</p><h3 id="反转链表">反转链表</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="示例1"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span></span><br><span class="line">输出：<span class="string">[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><p>官方定义的链表结构还是比较简单的，没有要用户自己定义链表，有些企业的面试题是需要自己定义的嘛，所以我们也简单自己定义一下，防患未然了属于是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*定义链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"><span class="comment">//空参构造方法</span></span><br><span class="line">ListNode()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="built_in">this</span>.val=val;</span><br><span class="line">&#125;</span><br><span class="line">ListNode(<span class="type">int</span> val,ListNode next)&#123;</span><br><span class="line"><span class="built_in">this</span>.val=val;</span><br><span class="line"><span class="built_in">this</span>.next=next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现任务之前，先简单实现一个输入获取和结果打印的方法，便于本地自行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">readDate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    String[] vals = sc.nextLine().replaceAll(<span class="string">&quot;^\\[*|\\]*$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span>(String val:vals)&#123;</span><br><span class="line">        pre.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(Integer.valueOf(val));</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printListNode</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">null</span> != head)&#123;</span><br><span class="line">        sb.append(head.val).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是正常实现了，我们分为两种方式实现吧，首先是比较简单的递归的方式实现，递归的方式就是不断把后半段反转然后作为前半段的头部分。</p><p>我的代码可能有一点唐氏，讲得也没有官方的好，所以我贴在这里，简单介绍一下，一些注释基本代表了我的想法，需要注意的只有一点，就是需要先翻转后面的节点，然后再和前面的节点拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表的递归实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 后面需要反转的链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pre 已经完成反转的前半部分的最后一个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 反转完之后链表的头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseListDFS</span><span class="params">(ListNode head,ListNode pre)</span>&#123;</span><br><span class="line">  <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> == head) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">//定义递归终点，也就是最后一个节点，直接把它和它前面的那个节点拼起来然后返回</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> == head.next)&#123;</span><br><span class="line">      head.next=pre;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//如果不是递归终点，这部分就需要理解一下</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//首先是将后面部分翻转！</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> reverseListDFS(head.next, head);</span><br><span class="line">      <span class="comment">//然后将改节点的next改为pre，拼接起来，顺序一定不能错</span></span><br><span class="line">        head.next = pre;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> reverseListDFS(head,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让我们来实现一下迭代的方式，迭代主要还是双指针的思路，其实相对而言思路比递归更容易理解一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表迭代实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 头指针</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 反转完之后链表的头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseListIter</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> == head) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//定义双指针，这个定义是有技巧的，因为头节点的next要是null</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">lst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//依次设置前指针的next为后指针</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">null</span> != pre)&#123;</span><br><span class="line">        ListNode tmp=pre.next;</span><br><span class="line">        pre.next = lst;</span><br><span class="line">        lst = pre;</span><br><span class="line">        pre = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前指针为空时，后指针所指着的位置就是最后一个Node，也就是我们所需要的head</span></span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后反转链表部分我们就基本讲完了，但是迭代这个部分的代码在后面我们还需要进行一点小小的修改，为什么呢，因为K个一组反转链表，链表的终点不是null，而是我们需要的终点是第K个节点。</p><p>接下来就是K个一组反转链表的任务，简单来说，我们只需要把任务拆成K个反转链表的子任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseSubList</span><span class="params">(ListNode head, ListNode last)</span> &#123;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> == head) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//定义双指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">lst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">//依次设置前指针的next为后指针</span></span><br><span class="line">    <span class="keyword">while</span>(last != lst)&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        pre.next = lst;</span><br><span class="line">        lst = pre;</span><br><span class="line">        pre = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//当k=1的时候，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == k) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">//为了统一以及便于找到头，我们定义一个伪头部，其实这是很常用的方法</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fake_head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    fake_head.next=head;</span><br><span class="line">    <span class="comment">//如果k不等于1，接下来我们就需要定义一个节点，这个节点所需要做的事情就是找到每组的第K个节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">findK</span> <span class="operator">=</span> fake_head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">lst_one</span> <span class="operator">=</span> fake_head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这里只需要判断findK是不是空，因为它一直走在其余两个交换位置的指针的前面</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">null</span>!=findK)&#123;</span><br><span class="line">        <span class="comment">//如果不是第K个，直接后移，不做处理</span></span><br><span class="line">        <span class="keyword">if</span>(count!=k)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            findK=findK.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是第K个</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//重置寻找循环</span></span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//首先是获得子段的头，子段的尾就是findK</span></span><br><span class="line">            ListNode child_head=lst_one.next;</span><br><span class="line">            ListNode K_next=findK.next;</span><br><span class="line">            <span class="comment">//然后进行子段反转，这里会把它的头尾都断开，所以之后就需要重新拼接</span></span><br><span class="line">            reverseSubList(child_head,findK);</span><br><span class="line">            <span class="comment">//然后将前面的子段和尾节点拼接</span></span><br><span class="line">            lst_one.next=findK;</span><br><span class="line">            <span class="comment">//将头节点和后面的节点拼接</span></span><br><span class="line">            child_head.next=K_next;</span><br><span class="line">            <span class="comment">//重置last_one和findK</span></span><br><span class="line">            lst_one = child_head;</span><br><span class="line">            findK = child_head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fake_head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只能说，很优雅，但是还是建议大家看看官解，我写的很简陋。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hot100 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
